/*
 * generated by Xtext 2.27.0
 */
grammar InternalWhiteSpace;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package ac.soton.java.whitespace.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package ac.soton.java.whitespace.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import ac.soton.java.whitespace.services.WhiteSpaceGrammarAccess;

}
@parser::members {
	private WhiteSpaceGrammarAccess grammarAccess;

	public void setGrammarAccess(WhiteSpaceGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleWSProgram
entryRuleWSProgram
:
{ before(grammarAccess.getWSProgramRule()); }
	 ruleWSProgram
{ after(grammarAccess.getWSProgramRule()); } 
	 EOF 
;

// Rule WSProgram
ruleWSProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getWSProgramAccess().getStatementsAssignment()); }
			(rule__WSProgram__StatementsAssignment)
			{ after(grammarAccess.getWSProgramAccess().getStatementsAssignment()); }
		)
		(
			{ before(grammarAccess.getWSProgramAccess().getStatementsAssignment()); }
			(rule__WSProgram__StatementsAssignment)*
			{ after(grammarAccess.getWSProgramAccess().getStatementsAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStackManipulation
entryRuleStackManipulation
:
{ before(grammarAccess.getStackManipulationRule()); }
	 ruleStackManipulation
{ after(grammarAccess.getStackManipulationRule()); } 
	 EOF 
;

// Rule StackManipulation
ruleStackManipulation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStackManipulationAccess().getGroup()); }
		(rule__StackManipulation__Group__0)
		{ after(grammarAccess.getStackManipulationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePush
entryRulePush
:
{ before(grammarAccess.getPushRule()); }
	 rulePush
{ after(grammarAccess.getPushRule()); } 
	 EOF 
;

// Rule Push
rulePush 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPushAccess().getGroup()); }
		(rule__Push__Group__0)
		{ after(grammarAccess.getPushAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDuplicate
entryRuleDuplicate
:
{ before(grammarAccess.getDuplicateRule()); }
	 ruleDuplicate
{ after(grammarAccess.getDuplicateRule()); } 
	 EOF 
;

// Rule Duplicate
ruleDuplicate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDuplicateAccess().getGroup()); }
		(rule__Duplicate__Group__0)
		{ after(grammarAccess.getDuplicateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCopy
entryRuleCopy
:
{ before(grammarAccess.getCopyRule()); }
	 ruleCopy
{ after(grammarAccess.getCopyRule()); } 
	 EOF 
;

// Rule Copy
ruleCopy 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCopyAccess().getGroup()); }
		(rule__Copy__Group__0)
		{ after(grammarAccess.getCopyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSwap
entryRuleSwap
:
{ before(grammarAccess.getSwapRule()); }
	 ruleSwap
{ after(grammarAccess.getSwapRule()); } 
	 EOF 
;

// Rule Swap
ruleSwap 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSwapAccess().getGroup()); }
		(rule__Swap__Group__0)
		{ after(grammarAccess.getSwapAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDiscard
entryRuleDiscard
:
{ before(grammarAccess.getDiscardRule()); }
	 ruleDiscard
{ after(grammarAccess.getDiscardRule()); } 
	 EOF 
;

// Rule Discard
ruleDiscard 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDiscardAccess().getGroup()); }
		(rule__Discard__Group__0)
		{ after(grammarAccess.getDiscardAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSlide
entryRuleSlide
:
{ before(grammarAccess.getSlideRule()); }
	 ruleSlide
{ after(grammarAccess.getSlideRule()); } 
	 EOF 
;

// Rule Slide
ruleSlide 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSlideAccess().getGroup()); }
		(rule__Slide__Group__0)
		{ after(grammarAccess.getSlideAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArithmetic
entryRuleArithmetic
:
{ before(grammarAccess.getArithmeticRule()); }
	 ruleArithmetic
{ after(grammarAccess.getArithmeticRule()); } 
	 EOF 
;

// Rule Arithmetic
ruleArithmetic 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArithmeticAccess().getGroup()); }
		(rule__Arithmetic__Group__0)
		{ after(grammarAccess.getArithmeticAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddition
entryRuleAddition
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditionAccess().getGroup()); }
		(rule__Addition__Group__0)
		{ after(grammarAccess.getAdditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSubtraction
entryRuleSubtraction
:
{ before(grammarAccess.getSubtractionRule()); }
	 ruleSubtraction
{ after(grammarAccess.getSubtractionRule()); } 
	 EOF 
;

// Rule Subtraction
ruleSubtraction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSubtractionAccess().getGroup()); }
		(rule__Subtraction__Group__0)
		{ after(grammarAccess.getSubtractionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplication
entryRuleMultiplication
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
		(rule__Multiplication__Group__0)
		{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDivision
entryRuleDivision
:
{ before(grammarAccess.getDivisionRule()); }
	 ruleDivision
{ after(grammarAccess.getDivisionRule()); } 
	 EOF 
;

// Rule Division
ruleDivision 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDivisionAccess().getGroup()); }
		(rule__Division__Group__0)
		{ after(grammarAccess.getDivisionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleModulo
entryRuleModulo
:
{ before(grammarAccess.getModuloRule()); }
	 ruleModulo
{ after(grammarAccess.getModuloRule()); } 
	 EOF 
;

// Rule Modulo
ruleModulo 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModuloAccess().getGroup()); }
		(rule__Modulo__Group__0)
		{ after(grammarAccess.getModuloAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHeapAccess
entryRuleHeapAccess
:
{ before(grammarAccess.getHeapAccessRule()); }
	 ruleHeapAccess
{ after(grammarAccess.getHeapAccessRule()); } 
	 EOF 
;

// Rule HeapAccess
ruleHeapAccess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHeapAccessAccess().getGroup()); }
		(rule__HeapAccess__Group__0)
		{ after(grammarAccess.getHeapAccessAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStore
entryRuleStore
:
{ before(grammarAccess.getStoreRule()); }
	 ruleStore
{ after(grammarAccess.getStoreRule()); } 
	 EOF 
;

// Rule Store
ruleStore 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStoreAccess().getGroup()); }
		(rule__Store__Group__0)
		{ after(grammarAccess.getStoreAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRetrieve
entryRuleRetrieve
:
{ before(grammarAccess.getRetrieveRule()); }
	 ruleRetrieve
{ after(grammarAccess.getRetrieveRule()); } 
	 EOF 
;

// Rule Retrieve
ruleRetrieve 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRetrieveAccess().getGroup()); }
		(rule__Retrieve__Group__0)
		{ after(grammarAccess.getRetrieveAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFlowControl
entryRuleFlowControl
:
{ before(grammarAccess.getFlowControlRule()); }
	 ruleFlowControl
{ after(grammarAccess.getFlowControlRule()); } 
	 EOF 
;

// Rule FlowControl
ruleFlowControl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFlowControlAccess().getGroup()); }
		(rule__FlowControl__Group__0)
		{ after(grammarAccess.getFlowControlAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMarkLocation
entryRuleMarkLocation
:
{ before(grammarAccess.getMarkLocationRule()); }
	 ruleMarkLocation
{ after(grammarAccess.getMarkLocationRule()); } 
	 EOF 
;

// Rule MarkLocation
ruleMarkLocation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMarkLocationAccess().getGroup()); }
		(rule__MarkLocation__Group__0)
		{ after(grammarAccess.getMarkLocationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCallSubroutine
entryRuleCallSubroutine
:
{ before(grammarAccess.getCallSubroutineRule()); }
	 ruleCallSubroutine
{ after(grammarAccess.getCallSubroutineRule()); } 
	 EOF 
;

// Rule CallSubroutine
ruleCallSubroutine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCallSubroutineAccess().getGroup()); }
		(rule__CallSubroutine__Group__0)
		{ after(grammarAccess.getCallSubroutineAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnconditionalJump
entryRuleUnconditionalJump
:
{ before(grammarAccess.getUnconditionalJumpRule()); }
	 ruleUnconditionalJump
{ after(grammarAccess.getUnconditionalJumpRule()); } 
	 EOF 
;

// Rule UnconditionalJump
ruleUnconditionalJump 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnconditionalJumpAccess().getGroup()); }
		(rule__UnconditionalJump__Group__0)
		{ after(grammarAccess.getUnconditionalJumpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleZeroJump
entryRuleZeroJump
:
{ before(grammarAccess.getZeroJumpRule()); }
	 ruleZeroJump
{ after(grammarAccess.getZeroJumpRule()); } 
	 EOF 
;

// Rule ZeroJump
ruleZeroJump 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getZeroJumpAccess().getGroup()); }
		(rule__ZeroJump__Group__0)
		{ after(grammarAccess.getZeroJumpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNegativeJump
entryRuleNegativeJump
:
{ before(grammarAccess.getNegativeJumpRule()); }
	 ruleNegativeJump
{ after(grammarAccess.getNegativeJumpRule()); } 
	 EOF 
;

// Rule NegativeJump
ruleNegativeJump 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNegativeJumpAccess().getGroup()); }
		(rule__NegativeJump__Group__0)
		{ after(grammarAccess.getNegativeJumpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEndSubroutine
entryRuleEndSubroutine
:
{ before(grammarAccess.getEndSubroutineRule()); }
	 ruleEndSubroutine
{ after(grammarAccess.getEndSubroutineRule()); } 
	 EOF 
;

// Rule EndSubroutine
ruleEndSubroutine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEndSubroutineAccess().getGroup()); }
		(rule__EndSubroutine__Group__0)
		{ after(grammarAccess.getEndSubroutineAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEndProgram
entryRuleEndProgram
:
{ before(grammarAccess.getEndProgramRule()); }
	 ruleEndProgram
{ after(grammarAccess.getEndProgramRule()); } 
	 EOF 
;

// Rule EndProgram
ruleEndProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEndProgramAccess().getGroup()); }
		(rule__EndProgram__Group__0)
		{ after(grammarAccess.getEndProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIO
entryRuleIO
:
{ before(grammarAccess.getIORule()); }
	 ruleIO
{ after(grammarAccess.getIORule()); } 
	 EOF 
;

// Rule IO
ruleIO 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIOAccess().getGroup()); }
		(rule__IO__Group__0)
		{ after(grammarAccess.getIOAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOutputCharacter
entryRuleOutputCharacter
:
{ before(grammarAccess.getOutputCharacterRule()); }
	 ruleOutputCharacter
{ after(grammarAccess.getOutputCharacterRule()); } 
	 EOF 
;

// Rule OutputCharacter
ruleOutputCharacter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOutputCharacterAccess().getGroup()); }
		(rule__OutputCharacter__Group__0)
		{ after(grammarAccess.getOutputCharacterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOutputNumber
entryRuleOutputNumber
:
{ before(grammarAccess.getOutputNumberRule()); }
	 ruleOutputNumber
{ after(grammarAccess.getOutputNumberRule()); } 
	 EOF 
;

// Rule OutputNumber
ruleOutputNumber 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOutputNumberAccess().getGroup()); }
		(rule__OutputNumber__Group__0)
		{ after(grammarAccess.getOutputNumberAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReadCharacter
entryRuleReadCharacter
:
{ before(grammarAccess.getReadCharacterRule()); }
	 ruleReadCharacter
{ after(grammarAccess.getReadCharacterRule()); } 
	 EOF 
;

// Rule ReadCharacter
ruleReadCharacter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReadCharacterAccess().getGroup()); }
		(rule__ReadCharacter__Group__0)
		{ after(grammarAccess.getReadCharacterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReadNumber
entryRuleReadNumber
:
{ before(grammarAccess.getReadNumberRule()); }
	 ruleReadNumber
{ after(grammarAccess.getReadNumberRule()); } 
	 EOF 
;

// Rule ReadNumber
ruleReadNumber 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReadNumberAccess().getGroup()); }
		(rule__ReadNumber__Group__0)
		{ after(grammarAccess.getReadNumberAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumber
entryRuleNumber
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;

// Rule Number
ruleNumber 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberAccess().getGroup()); }
		(rule__Number__Group__0)
		{ after(grammarAccess.getNumberAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLabel
entryRuleLabel
:
{ before(grammarAccess.getLabelRule()); }
	 ruleLabel
{ after(grammarAccess.getLabelRule()); } 
	 EOF 
;

// Rule Label
ruleLabel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLabelAccess().getGroup()); }
		(rule__Label__Group__0)
		{ after(grammarAccess.getLabelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getStackManipulationParserRuleCall_0()); }
		ruleStackManipulation
		{ after(grammarAccess.getStatementAccess().getStackManipulationParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getArithmeticParserRuleCall_1()); }
		ruleArithmetic
		{ after(grammarAccess.getStatementAccess().getArithmeticParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getHeapAccessParserRuleCall_2()); }
		ruleHeapAccess
		{ after(grammarAccess.getStatementAccess().getHeapAccessParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getFlowControlParserRuleCall_3()); }
		ruleFlowControl
		{ after(grammarAccess.getStatementAccess().getFlowControlParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getIOParserRuleCall_4()); }
		ruleIO
		{ after(grammarAccess.getStatementAccess().getIOParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StackManipulation__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStackManipulationAccess().getPushParserRuleCall_1_0()); }
		rulePush
		{ after(grammarAccess.getStackManipulationAccess().getPushParserRuleCall_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getStackManipulationAccess().getDuplicateParserRuleCall_1_1()); }
		ruleDuplicate
		{ after(grammarAccess.getStackManipulationAccess().getDuplicateParserRuleCall_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getStackManipulationAccess().getCopyParserRuleCall_1_2()); }
		ruleCopy
		{ after(grammarAccess.getStackManipulationAccess().getCopyParserRuleCall_1_2()); }
	)
	|
	(
		{ before(grammarAccess.getStackManipulationAccess().getSwapParserRuleCall_1_3()); }
		ruleSwap
		{ after(grammarAccess.getStackManipulationAccess().getSwapParserRuleCall_1_3()); }
	)
	|
	(
		{ before(grammarAccess.getStackManipulationAccess().getDiscardParserRuleCall_1_4()); }
		ruleDiscard
		{ after(grammarAccess.getStackManipulationAccess().getDiscardParserRuleCall_1_4()); }
	)
	|
	(
		{ before(grammarAccess.getStackManipulationAccess().getSlideParserRuleCall_1_5()); }
		ruleSlide
		{ after(grammarAccess.getStackManipulationAccess().getSlideParserRuleCall_1_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arithmetic__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithmeticAccess().getAdditionParserRuleCall_2_0()); }
		ruleAddition
		{ after(grammarAccess.getArithmeticAccess().getAdditionParserRuleCall_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticAccess().getSubtractionParserRuleCall_2_1()); }
		ruleSubtraction
		{ after(grammarAccess.getArithmeticAccess().getSubtractionParserRuleCall_2_1()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticAccess().getMultiplicationParserRuleCall_2_2()); }
		ruleMultiplication
		{ after(grammarAccess.getArithmeticAccess().getMultiplicationParserRuleCall_2_2()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticAccess().getDivisionParserRuleCall_2_3()); }
		ruleDivision
		{ after(grammarAccess.getArithmeticAccess().getDivisionParserRuleCall_2_3()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticAccess().getModuloParserRuleCall_2_4()); }
		ruleModulo
		{ after(grammarAccess.getArithmeticAccess().getModuloParserRuleCall_2_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__HeapAccess__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHeapAccessAccess().getStoreParserRuleCall_2_0()); }
		ruleStore
		{ after(grammarAccess.getHeapAccessAccess().getStoreParserRuleCall_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getHeapAccessAccess().getRetrieveParserRuleCall_2_1()); }
		ruleRetrieve
		{ after(grammarAccess.getHeapAccessAccess().getRetrieveParserRuleCall_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowControl__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFlowControlAccess().getMarkLocationParserRuleCall_1_0()); }
		ruleMarkLocation
		{ after(grammarAccess.getFlowControlAccess().getMarkLocationParserRuleCall_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getFlowControlAccess().getCallSubroutineParserRuleCall_1_1()); }
		ruleCallSubroutine
		{ after(grammarAccess.getFlowControlAccess().getCallSubroutineParserRuleCall_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getFlowControlAccess().getUnconditionalJumpParserRuleCall_1_2()); }
		ruleUnconditionalJump
		{ after(grammarAccess.getFlowControlAccess().getUnconditionalJumpParserRuleCall_1_2()); }
	)
	|
	(
		{ before(grammarAccess.getFlowControlAccess().getZeroJumpParserRuleCall_1_3()); }
		ruleZeroJump
		{ after(grammarAccess.getFlowControlAccess().getZeroJumpParserRuleCall_1_3()); }
	)
	|
	(
		{ before(grammarAccess.getFlowControlAccess().getNegativeJumpParserRuleCall_1_4()); }
		ruleNegativeJump
		{ after(grammarAccess.getFlowControlAccess().getNegativeJumpParserRuleCall_1_4()); }
	)
	|
	(
		{ before(grammarAccess.getFlowControlAccess().getEndSubroutineParserRuleCall_1_5()); }
		ruleEndSubroutine
		{ after(grammarAccess.getFlowControlAccess().getEndSubroutineParserRuleCall_1_5()); }
	)
	|
	(
		{ before(grammarAccess.getFlowControlAccess().getEndProgramParserRuleCall_1_6()); }
		ruleEndProgram
		{ after(grammarAccess.getFlowControlAccess().getEndProgramParserRuleCall_1_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IO__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIOAccess().getOutputCharacterParserRuleCall_2_0()); }
		ruleOutputCharacter
		{ after(grammarAccess.getIOAccess().getOutputCharacterParserRuleCall_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getIOAccess().getOutputNumberParserRuleCall_2_1()); }
		ruleOutputNumber
		{ after(grammarAccess.getIOAccess().getOutputNumberParserRuleCall_2_1()); }
	)
	|
	(
		{ before(grammarAccess.getIOAccess().getReadCharacterParserRuleCall_2_2()); }
		ruleReadCharacter
		{ after(grammarAccess.getIOAccess().getReadCharacterParserRuleCall_2_2()); }
	)
	|
	(
		{ before(grammarAccess.getIOAccess().getReadNumberParserRuleCall_2_3()); }
		ruleReadNumber
		{ after(grammarAccess.getIOAccess().getReadNumberParserRuleCall_2_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberAccess().getSPACETerminalRuleCall_0_0()); }
		RULE_SPACE
		{ after(grammarAccess.getNumberAccess().getSPACETerminalRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumberAccess().getTABTerminalRuleCall_0_1()); }
		RULE_TAB
		{ after(grammarAccess.getNumberAccess().getTABTerminalRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLabelAccess().getSPACETerminalRuleCall_0_0()); }
		RULE_SPACE
		{ after(grammarAccess.getLabelAccess().getSPACETerminalRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getLabelAccess().getTABTerminalRuleCall_0_1()); }
		RULE_TAB
		{ after(grammarAccess.getLabelAccess().getTABTerminalRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StackManipulation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StackManipulation__Group__0__Impl
	rule__StackManipulation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StackManipulation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStackManipulationAccess().getSPACETerminalRuleCall_0()); }
	RULE_SPACE
	{ after(grammarAccess.getStackManipulationAccess().getSPACETerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StackManipulation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StackManipulation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StackManipulation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStackManipulationAccess().getAlternatives_1()); }
	(rule__StackManipulation__Alternatives_1)
	{ after(grammarAccess.getStackManipulationAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Push__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Push__Group__0__Impl
	rule__Push__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Push__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPushAccess().getPushAction_0()); }
	()
	{ after(grammarAccess.getPushAccess().getPushAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Push__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Push__Group__1__Impl
	rule__Push__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Push__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPushAccess().getSPACETerminalRuleCall_1()); }
	RULE_SPACE
	{ after(grammarAccess.getPushAccess().getSPACETerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Push__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Push__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Push__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPushAccess().getNumberAssignment_2()); }
	(rule__Push__NumberAssignment_2)
	{ after(grammarAccess.getPushAccess().getNumberAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Duplicate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Duplicate__Group__0__Impl
	rule__Duplicate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Duplicate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDuplicateAccess().getDuplicateAction_0()); }
	()
	{ after(grammarAccess.getDuplicateAccess().getDuplicateAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Duplicate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Duplicate__Group__1__Impl
	rule__Duplicate__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Duplicate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDuplicateAccess().getLFTerminalRuleCall_1()); }
	RULE_LF
	{ after(grammarAccess.getDuplicateAccess().getLFTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Duplicate__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Duplicate__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Duplicate__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDuplicateAccess().getSPACETerminalRuleCall_2()); }
	RULE_SPACE
	{ after(grammarAccess.getDuplicateAccess().getSPACETerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Copy__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Copy__Group__0__Impl
	rule__Copy__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Copy__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCopyAccess().getCopyAction_0()); }
	()
	{ after(grammarAccess.getCopyAccess().getCopyAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Copy__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Copy__Group__1__Impl
	rule__Copy__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Copy__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCopyAccess().getTABTerminalRuleCall_1()); }
	RULE_TAB
	{ after(grammarAccess.getCopyAccess().getTABTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Copy__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Copy__Group__2__Impl
	rule__Copy__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Copy__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCopyAccess().getSPACETerminalRuleCall_2()); }
	RULE_SPACE
	{ after(grammarAccess.getCopyAccess().getSPACETerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Copy__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Copy__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Copy__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCopyAccess().getNumberAssignment_3()); }
	(rule__Copy__NumberAssignment_3)
	{ after(grammarAccess.getCopyAccess().getNumberAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Swap__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Swap__Group__0__Impl
	rule__Swap__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Swap__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwapAccess().getSwapAction_0()); }
	()
	{ after(grammarAccess.getSwapAccess().getSwapAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Swap__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Swap__Group__1__Impl
	rule__Swap__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Swap__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwapAccess().getLFTerminalRuleCall_1()); }
	RULE_LF
	{ after(grammarAccess.getSwapAccess().getLFTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Swap__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Swap__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Swap__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwapAccess().getTABTerminalRuleCall_2()); }
	RULE_TAB
	{ after(grammarAccess.getSwapAccess().getTABTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Discard__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Discard__Group__0__Impl
	rule__Discard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Discard__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiscardAccess().getDiscardAction_0()); }
	()
	{ after(grammarAccess.getDiscardAccess().getDiscardAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Discard__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Discard__Group__1__Impl
	rule__Discard__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Discard__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiscardAccess().getLFTerminalRuleCall_1()); }
	RULE_LF
	{ after(grammarAccess.getDiscardAccess().getLFTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Discard__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Discard__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Discard__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiscardAccess().getLFTerminalRuleCall_2()); }
	RULE_LF
	{ after(grammarAccess.getDiscardAccess().getLFTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Slide__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Slide__Group__0__Impl
	rule__Slide__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Slide__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSlideAccess().getSlideAction_0()); }
	()
	{ after(grammarAccess.getSlideAccess().getSlideAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Slide__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Slide__Group__1__Impl
	rule__Slide__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Slide__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSlideAccess().getTABTerminalRuleCall_1()); }
	RULE_TAB
	{ after(grammarAccess.getSlideAccess().getTABTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Slide__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Slide__Group__2__Impl
	rule__Slide__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Slide__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSlideAccess().getLFTerminalRuleCall_2()); }
	RULE_LF
	{ after(grammarAccess.getSlideAccess().getLFTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Slide__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Slide__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Slide__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSlideAccess().getNumberAssignment_3()); }
	(rule__Slide__NumberAssignment_3)
	{ after(grammarAccess.getSlideAccess().getNumberAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Arithmetic__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arithmetic__Group__0__Impl
	rule__Arithmetic__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Arithmetic__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticAccess().getTABTerminalRuleCall_0()); }
	RULE_TAB
	{ after(grammarAccess.getArithmeticAccess().getTABTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arithmetic__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arithmetic__Group__1__Impl
	rule__Arithmetic__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Arithmetic__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticAccess().getSPACETerminalRuleCall_1()); }
	RULE_SPACE
	{ after(grammarAccess.getArithmeticAccess().getSPACETerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arithmetic__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arithmetic__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Arithmetic__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticAccess().getAlternatives_2()); }
	(rule__Arithmetic__Alternatives_2)
	{ after(grammarAccess.getArithmeticAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getAdditionAction_0()); }
	()
	{ after(grammarAccess.getAdditionAccess().getAdditionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__1__Impl
	rule__Addition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getSPACETerminalRuleCall_1()); }
	RULE_SPACE
	{ after(grammarAccess.getAdditionAccess().getSPACETerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getSPACETerminalRuleCall_2()); }
	RULE_SPACE
	{ after(grammarAccess.getAdditionAccess().getSPACETerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Subtraction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Subtraction__Group__0__Impl
	rule__Subtraction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Subtraction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubtractionAccess().getSubtractionAction_0()); }
	()
	{ after(grammarAccess.getSubtractionAccess().getSubtractionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Subtraction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Subtraction__Group__1__Impl
	rule__Subtraction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Subtraction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubtractionAccess().getSPACETerminalRuleCall_1()); }
	RULE_SPACE
	{ after(grammarAccess.getSubtractionAccess().getSPACETerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Subtraction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Subtraction__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Subtraction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubtractionAccess().getTABTerminalRuleCall_2()); }
	RULE_TAB
	{ after(grammarAccess.getSubtractionAccess().getTABTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getMultiplicationAction_0()); }
	()
	{ after(grammarAccess.getMultiplicationAccess().getMultiplicationAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__1__Impl
	rule__Multiplication__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getSPACETerminalRuleCall_1()); }
	RULE_SPACE
	{ after(grammarAccess.getMultiplicationAccess().getSPACETerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getLFTerminalRuleCall_2()); }
	RULE_LF
	{ after(grammarAccess.getMultiplicationAccess().getLFTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Division__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Division__Group__0__Impl
	rule__Division__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivisionAccess().getDivisionAction_0()); }
	()
	{ after(grammarAccess.getDivisionAccess().getDivisionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Division__Group__1__Impl
	rule__Division__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivisionAccess().getTABTerminalRuleCall_1()); }
	RULE_TAB
	{ after(grammarAccess.getDivisionAccess().getTABTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Division__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivisionAccess().getSPACETerminalRuleCall_2()); }
	RULE_SPACE
	{ after(grammarAccess.getDivisionAccess().getSPACETerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Modulo__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Modulo__Group__0__Impl
	rule__Modulo__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Modulo__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuloAccess().getModuloAction_0()); }
	()
	{ after(grammarAccess.getModuloAccess().getModuloAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Modulo__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Modulo__Group__1__Impl
	rule__Modulo__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Modulo__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuloAccess().getTABTerminalRuleCall_1()); }
	RULE_TAB
	{ after(grammarAccess.getModuloAccess().getTABTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Modulo__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Modulo__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Modulo__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuloAccess().getTABTerminalRuleCall_2()); }
	RULE_TAB
	{ after(grammarAccess.getModuloAccess().getTABTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__HeapAccess__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HeapAccess__Group__0__Impl
	rule__HeapAccess__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HeapAccess__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeapAccessAccess().getTABTerminalRuleCall_0()); }
	RULE_TAB
	{ after(grammarAccess.getHeapAccessAccess().getTABTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HeapAccess__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HeapAccess__Group__1__Impl
	rule__HeapAccess__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__HeapAccess__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeapAccessAccess().getTABTerminalRuleCall_1()); }
	RULE_TAB
	{ after(grammarAccess.getHeapAccessAccess().getTABTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HeapAccess__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HeapAccess__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HeapAccess__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeapAccessAccess().getAlternatives_2()); }
	(rule__HeapAccess__Alternatives_2)
	{ after(grammarAccess.getHeapAccessAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Store__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Store__Group__0__Impl
	rule__Store__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoreAccess().getStoreAction_0()); }
	()
	{ after(grammarAccess.getStoreAccess().getStoreAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Store__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoreAccess().getSPACETerminalRuleCall_1()); }
	RULE_SPACE
	{ after(grammarAccess.getStoreAccess().getSPACETerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Retrieve__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Retrieve__Group__0__Impl
	rule__Retrieve__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Retrieve__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRetrieveAccess().getRetrieveAction_0()); }
	()
	{ after(grammarAccess.getRetrieveAccess().getRetrieveAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Retrieve__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Retrieve__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Retrieve__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRetrieveAccess().getTABTerminalRuleCall_1()); }
	RULE_TAB
	{ after(grammarAccess.getRetrieveAccess().getTABTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FlowControl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FlowControl__Group__0__Impl
	rule__FlowControl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowControl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlowControlAccess().getLFTerminalRuleCall_0()); }
	RULE_LF
	{ after(grammarAccess.getFlowControlAccess().getLFTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowControl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FlowControl__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowControl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlowControlAccess().getAlternatives_1()); }
	(rule__FlowControl__Alternatives_1)
	{ after(grammarAccess.getFlowControlAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MarkLocation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MarkLocation__Group__0__Impl
	rule__MarkLocation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkLocation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMarkLocationAccess().getMarkLocationAction_0()); }
	()
	{ after(grammarAccess.getMarkLocationAccess().getMarkLocationAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkLocation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MarkLocation__Group__1__Impl
	rule__MarkLocation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkLocation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMarkLocationAccess().getSPACETerminalRuleCall_1()); }
	RULE_SPACE
	{ after(grammarAccess.getMarkLocationAccess().getSPACETerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkLocation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MarkLocation__Group__2__Impl
	rule__MarkLocation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkLocation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMarkLocationAccess().getSPACETerminalRuleCall_2()); }
	RULE_SPACE
	{ after(grammarAccess.getMarkLocationAccess().getSPACETerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkLocation__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MarkLocation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkLocation__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMarkLocationAccess().getLabelAssignment_3()); }
	(rule__MarkLocation__LabelAssignment_3)
	{ after(grammarAccess.getMarkLocationAccess().getLabelAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CallSubroutine__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CallSubroutine__Group__0__Impl
	rule__CallSubroutine__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CallSubroutine__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallSubroutineAccess().getCallSubroutineAction_0()); }
	()
	{ after(grammarAccess.getCallSubroutineAccess().getCallSubroutineAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CallSubroutine__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CallSubroutine__Group__1__Impl
	rule__CallSubroutine__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CallSubroutine__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallSubroutineAccess().getSPACETerminalRuleCall_1()); }
	RULE_SPACE
	{ after(grammarAccess.getCallSubroutineAccess().getSPACETerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CallSubroutine__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CallSubroutine__Group__2__Impl
	rule__CallSubroutine__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CallSubroutine__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallSubroutineAccess().getTABTerminalRuleCall_2()); }
	RULE_TAB
	{ after(grammarAccess.getCallSubroutineAccess().getTABTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CallSubroutine__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CallSubroutine__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CallSubroutine__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallSubroutineAccess().getLabelAssignment_3()); }
	(rule__CallSubroutine__LabelAssignment_3)
	{ after(grammarAccess.getCallSubroutineAccess().getLabelAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnconditionalJump__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnconditionalJump__Group__0__Impl
	rule__UnconditionalJump__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconditionalJump__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnconditionalJumpAccess().getUnconditionalJumpAction_0()); }
	()
	{ after(grammarAccess.getUnconditionalJumpAccess().getUnconditionalJumpAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconditionalJump__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnconditionalJump__Group__1__Impl
	rule__UnconditionalJump__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconditionalJump__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnconditionalJumpAccess().getSPACETerminalRuleCall_1()); }
	RULE_SPACE
	{ after(grammarAccess.getUnconditionalJumpAccess().getSPACETerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconditionalJump__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnconditionalJump__Group__2__Impl
	rule__UnconditionalJump__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconditionalJump__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnconditionalJumpAccess().getLFTerminalRuleCall_2()); }
	RULE_LF
	{ after(grammarAccess.getUnconditionalJumpAccess().getLFTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconditionalJump__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnconditionalJump__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconditionalJump__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnconditionalJumpAccess().getLabelAssignment_3()); }
	(rule__UnconditionalJump__LabelAssignment_3)
	{ after(grammarAccess.getUnconditionalJumpAccess().getLabelAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ZeroJump__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ZeroJump__Group__0__Impl
	rule__ZeroJump__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ZeroJump__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getZeroJumpAccess().getZeroJumpAction_0()); }
	()
	{ after(grammarAccess.getZeroJumpAccess().getZeroJumpAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ZeroJump__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ZeroJump__Group__1__Impl
	rule__ZeroJump__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ZeroJump__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getZeroJumpAccess().getTABTerminalRuleCall_1()); }
	RULE_TAB
	{ after(grammarAccess.getZeroJumpAccess().getTABTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ZeroJump__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ZeroJump__Group__2__Impl
	rule__ZeroJump__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ZeroJump__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getZeroJumpAccess().getSPACETerminalRuleCall_2()); }
	RULE_SPACE
	{ after(grammarAccess.getZeroJumpAccess().getSPACETerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ZeroJump__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ZeroJump__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ZeroJump__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getZeroJumpAccess().getLabelAssignment_3()); }
	(rule__ZeroJump__LabelAssignment_3)
	{ after(grammarAccess.getZeroJumpAccess().getLabelAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NegativeJump__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NegativeJump__Group__0__Impl
	rule__NegativeJump__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NegativeJump__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegativeJumpAccess().getNegativeJumpAction_0()); }
	()
	{ after(grammarAccess.getNegativeJumpAccess().getNegativeJumpAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NegativeJump__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NegativeJump__Group__1__Impl
	rule__NegativeJump__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NegativeJump__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegativeJumpAccess().getTABTerminalRuleCall_1()); }
	RULE_TAB
	{ after(grammarAccess.getNegativeJumpAccess().getTABTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NegativeJump__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NegativeJump__Group__2__Impl
	rule__NegativeJump__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NegativeJump__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegativeJumpAccess().getTABTerminalRuleCall_2()); }
	RULE_TAB
	{ after(grammarAccess.getNegativeJumpAccess().getTABTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NegativeJump__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NegativeJump__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NegativeJump__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegativeJumpAccess().getLabelAssignment_3()); }
	(rule__NegativeJump__LabelAssignment_3)
	{ after(grammarAccess.getNegativeJumpAccess().getLabelAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EndSubroutine__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EndSubroutine__Group__0__Impl
	rule__EndSubroutine__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EndSubroutine__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEndSubroutineAccess().getEndSubroutineAction_0()); }
	()
	{ after(grammarAccess.getEndSubroutineAccess().getEndSubroutineAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EndSubroutine__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EndSubroutine__Group__1__Impl
	rule__EndSubroutine__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EndSubroutine__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEndSubroutineAccess().getTABTerminalRuleCall_1()); }
	RULE_TAB
	{ after(grammarAccess.getEndSubroutineAccess().getTABTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EndSubroutine__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EndSubroutine__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EndSubroutine__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEndSubroutineAccess().getLFTerminalRuleCall_2()); }
	RULE_LF
	{ after(grammarAccess.getEndSubroutineAccess().getLFTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EndProgram__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EndProgram__Group__0__Impl
	rule__EndProgram__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EndProgram__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEndProgramAccess().getEndProgramAction_0()); }
	()
	{ after(grammarAccess.getEndProgramAccess().getEndProgramAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EndProgram__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EndProgram__Group__1__Impl
	rule__EndProgram__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EndProgram__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEndProgramAccess().getLFTerminalRuleCall_1()); }
	RULE_LF
	{ after(grammarAccess.getEndProgramAccess().getLFTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EndProgram__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EndProgram__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EndProgram__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEndProgramAccess().getLFTerminalRuleCall_2()); }
	RULE_LF
	{ after(grammarAccess.getEndProgramAccess().getLFTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IO__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IO__Group__0__Impl
	rule__IO__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IO__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIOAccess().getTABTerminalRuleCall_0()); }
	RULE_TAB
	{ after(grammarAccess.getIOAccess().getTABTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IO__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IO__Group__1__Impl
	rule__IO__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IO__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIOAccess().getLFTerminalRuleCall_1()); }
	RULE_LF
	{ after(grammarAccess.getIOAccess().getLFTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IO__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IO__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IO__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIOAccess().getAlternatives_2()); }
	(rule__IO__Alternatives_2)
	{ after(grammarAccess.getIOAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OutputCharacter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputCharacter__Group__0__Impl
	rule__OutputCharacter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputCharacter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputCharacterAccess().getOutputCharacterAction_0()); }
	()
	{ after(grammarAccess.getOutputCharacterAccess().getOutputCharacterAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputCharacter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputCharacter__Group__1__Impl
	rule__OutputCharacter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputCharacter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputCharacterAccess().getSPACETerminalRuleCall_1()); }
	RULE_SPACE
	{ after(grammarAccess.getOutputCharacterAccess().getSPACETerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputCharacter__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputCharacter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputCharacter__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputCharacterAccess().getSPACETerminalRuleCall_2()); }
	RULE_SPACE
	{ after(grammarAccess.getOutputCharacterAccess().getSPACETerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OutputNumber__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputNumber__Group__0__Impl
	rule__OutputNumber__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputNumber__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputNumberAccess().getOutputNumberAction_0()); }
	()
	{ after(grammarAccess.getOutputNumberAccess().getOutputNumberAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputNumber__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputNumber__Group__1__Impl
	rule__OutputNumber__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputNumber__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputNumberAccess().getSPACETerminalRuleCall_1()); }
	RULE_SPACE
	{ after(grammarAccess.getOutputNumberAccess().getSPACETerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputNumber__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputNumber__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputNumber__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputNumberAccess().getTABTerminalRuleCall_2()); }
	RULE_TAB
	{ after(grammarAccess.getOutputNumberAccess().getTABTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ReadCharacter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReadCharacter__Group__0__Impl
	rule__ReadCharacter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReadCharacter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReadCharacterAccess().getReadCharacterAction_0()); }
	()
	{ after(grammarAccess.getReadCharacterAccess().getReadCharacterAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReadCharacter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReadCharacter__Group__1__Impl
	rule__ReadCharacter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReadCharacter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReadCharacterAccess().getTABTerminalRuleCall_1()); }
	RULE_TAB
	{ after(grammarAccess.getReadCharacterAccess().getTABTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReadCharacter__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReadCharacter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReadCharacter__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReadCharacterAccess().getSPACETerminalRuleCall_2()); }
	RULE_SPACE
	{ after(grammarAccess.getReadCharacterAccess().getSPACETerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ReadNumber__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReadNumber__Group__0__Impl
	rule__ReadNumber__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReadNumber__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReadNumberAccess().getReadNumberAction_0()); }
	()
	{ after(grammarAccess.getReadNumberAccess().getReadNumberAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReadNumber__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReadNumber__Group__1__Impl
	rule__ReadNumber__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReadNumber__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReadNumberAccess().getTABTerminalRuleCall_1()); }
	RULE_TAB
	{ after(grammarAccess.getReadNumberAccess().getTABTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReadNumber__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReadNumber__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReadNumber__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReadNumberAccess().getTABTerminalRuleCall_2()); }
	RULE_TAB
	{ after(grammarAccess.getReadNumberAccess().getTABTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group__0__Impl
	rule__Number__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getNumberAccess().getAlternatives_0()); }
		(rule__Number__Alternatives_0)
		{ after(grammarAccess.getNumberAccess().getAlternatives_0()); }
	)
	(
		{ before(grammarAccess.getNumberAccess().getAlternatives_0()); }
		(rule__Number__Alternatives_0)*
		{ after(grammarAccess.getNumberAccess().getAlternatives_0()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getLFTerminalRuleCall_1()); }
	RULE_LF
	{ after(grammarAccess.getNumberAccess().getLFTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Label__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Label__Group__0__Impl
	rule__Label__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getLabelAccess().getAlternatives_0()); }
		(rule__Label__Alternatives_0)
		{ after(grammarAccess.getLabelAccess().getAlternatives_0()); }
	)
	(
		{ before(grammarAccess.getLabelAccess().getAlternatives_0()); }
		(rule__Label__Alternatives_0)*
		{ after(grammarAccess.getLabelAccess().getAlternatives_0()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Label__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLabelAccess().getLFTerminalRuleCall_1()); }
	RULE_LF
	{ after(grammarAccess.getLabelAccess().getLFTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WSProgram__StatementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWSProgramAccess().getStatementsStatementParserRuleCall_0()); }
		ruleStatement
		{ after(grammarAccess.getWSProgramAccess().getStatementsStatementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Push__NumberAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPushAccess().getNumberNumberParserRuleCall_2_0()); }
		ruleNumber
		{ after(grammarAccess.getPushAccess().getNumberNumberParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Copy__NumberAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCopyAccess().getNumberNumberParserRuleCall_3_0()); }
		ruleNumber
		{ after(grammarAccess.getCopyAccess().getNumberNumberParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Slide__NumberAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSlideAccess().getNumberNumberParserRuleCall_3_0()); }
		ruleNumber
		{ after(grammarAccess.getSlideAccess().getNumberNumberParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkLocation__LabelAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMarkLocationAccess().getLabelLabelParserRuleCall_3_0()); }
		ruleLabel
		{ after(grammarAccess.getMarkLocationAccess().getLabelLabelParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CallSubroutine__LabelAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCallSubroutineAccess().getLabelLabelParserRuleCall_3_0()); }
		ruleLabel
		{ after(grammarAccess.getCallSubroutineAccess().getLabelLabelParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconditionalJump__LabelAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnconditionalJumpAccess().getLabelLabelParserRuleCall_3_0()); }
		ruleLabel
		{ after(grammarAccess.getUnconditionalJumpAccess().getLabelLabelParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ZeroJump__LabelAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getZeroJumpAccess().getLabelLabelParserRuleCall_3_0()); }
		ruleLabel
		{ after(grammarAccess.getZeroJumpAccess().getLabelLabelParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NegativeJump__LabelAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNegativeJumpAccess().getLabelLabelParserRuleCall_3_0()); }
		ruleLabel
		{ after(grammarAccess.getNegativeJumpAccess().getLabelLabelParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SPACE : ' ';

RULE_TAB : '\t';

RULE_LF : '\n';

RULE_NOTWS : ~((' '|'\t'|'\n'))+;
