/*
 * generated by Xtext 2.27.0
 */
grammar InternalWhiteSpace;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package ac.soton.java.whitespace.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package ac.soton.java.whitespace.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import ac.soton.java.whitespace.services.WhiteSpaceGrammarAccess;

}

@parser::members {

 	private WhiteSpaceGrammarAccess grammarAccess;

    public InternalWhiteSpaceParser(TokenStream input, WhiteSpaceGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "WSProgram";
   	}

   	@Override
   	protected WhiteSpaceGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleWSProgram
entryRuleWSProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWSProgramRule()); }
	iv_ruleWSProgram=ruleWSProgram
	{ $current=$iv_ruleWSProgram.current; }
	EOF;

// Rule WSProgram
ruleWSProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getWSProgramAccess().getStatementsStatementParserRuleCall_0());
			}
			lv_statements_0_0=ruleStatement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getWSProgramRule());
				}
				add(
					$current,
					"statements",
					lv_statements_0_0,
					"ac.soton.java.whitespace.WhiteSpace.Statement");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getStackManipulationParserRuleCall_0());
		}
		this_StackManipulation_0=ruleStackManipulation
		{
			$current = $this_StackManipulation_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getArithmeticParserRuleCall_1());
		}
		this_Arithmetic_1=ruleArithmetic
		{
			$current = $this_Arithmetic_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getHeapAccessParserRuleCall_2());
		}
		this_HeapAccess_2=ruleHeapAccess
		{
			$current = $this_HeapAccess_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getFlowControlParserRuleCall_3());
		}
		this_FlowControl_3=ruleFlowControl
		{
			$current = $this_FlowControl_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIOParserRuleCall_4());
		}
		this_IO_4=ruleIO
		{
			$current = $this_IO_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStackManipulation
entryRuleStackManipulation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStackManipulationRule()); }
	iv_ruleStackManipulation=ruleStackManipulation
	{ $current=$iv_ruleStackManipulation.current; }
	EOF;

// Rule StackManipulation
ruleStackManipulation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_SPACE_0=RULE_SPACE
		{
			newLeafNode(this_SPACE_0, grammarAccess.getStackManipulationAccess().getSPACETerminalRuleCall_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getStackManipulationAccess().getPushParserRuleCall_1_0());
			}
			this_Push_1=rulePush
			{
				$current = $this_Push_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStackManipulationAccess().getDuplicateParserRuleCall_1_1());
			}
			this_Duplicate_2=ruleDuplicate
			{
				$current = $this_Duplicate_2.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStackManipulationAccess().getCopyParserRuleCall_1_2());
			}
			this_Copy_3=ruleCopy
			{
				$current = $this_Copy_3.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStackManipulationAccess().getSwapParserRuleCall_1_3());
			}
			this_Swap_4=ruleSwap
			{
				$current = $this_Swap_4.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStackManipulationAccess().getDiscardParserRuleCall_1_4());
			}
			this_Discard_5=ruleDiscard
			{
				$current = $this_Discard_5.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStackManipulationAccess().getSlideParserRuleCall_1_5());
			}
			this_Slide_6=ruleSlide
			{
				$current = $this_Slide_6.current;
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulePush
entryRulePush returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPushRule()); }
	iv_rulePush=rulePush
	{ $current=$iv_rulePush.current; }
	EOF;

// Rule Push
rulePush returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPushAccess().getPushAction_0(),
					$current);
			}
		)
		this_SPACE_1=RULE_SPACE
		{
			newLeafNode(this_SPACE_1, grammarAccess.getPushAccess().getSPACETerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPushAccess().getNumberNumberParserRuleCall_2_0());
				}
				lv_number_2_0=ruleNumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPushRule());
					}
					set(
						$current,
						"number",
						lv_number_2_0,
						"ac.soton.java.whitespace.WhiteSpace.Number");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDuplicate
entryRuleDuplicate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDuplicateRule()); }
	iv_ruleDuplicate=ruleDuplicate
	{ $current=$iv_ruleDuplicate.current; }
	EOF;

// Rule Duplicate
ruleDuplicate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDuplicateAccess().getDuplicateAction_0(),
					$current);
			}
		)
		this_LF_1=RULE_LF
		{
			newLeafNode(this_LF_1, grammarAccess.getDuplicateAccess().getLFTerminalRuleCall_1());
		}
		this_SPACE_2=RULE_SPACE
		{
			newLeafNode(this_SPACE_2, grammarAccess.getDuplicateAccess().getSPACETerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleCopy
entryRuleCopy returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCopyRule()); }
	iv_ruleCopy=ruleCopy
	{ $current=$iv_ruleCopy.current; }
	EOF;

// Rule Copy
ruleCopy returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCopyAccess().getCopyAction_0(),
					$current);
			}
		)
		this_TAB_1=RULE_TAB
		{
			newLeafNode(this_TAB_1, grammarAccess.getCopyAccess().getTABTerminalRuleCall_1());
		}
		this_SPACE_2=RULE_SPACE
		{
			newLeafNode(this_SPACE_2, grammarAccess.getCopyAccess().getSPACETerminalRuleCall_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCopyAccess().getNumberNumberParserRuleCall_3_0());
				}
				lv_number_3_0=ruleNumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCopyRule());
					}
					set(
						$current,
						"number",
						lv_number_3_0,
						"ac.soton.java.whitespace.WhiteSpace.Number");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSwap
entryRuleSwap returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSwapRule()); }
	iv_ruleSwap=ruleSwap
	{ $current=$iv_ruleSwap.current; }
	EOF;

// Rule Swap
ruleSwap returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSwapAccess().getSwapAction_0(),
					$current);
			}
		)
		this_LF_1=RULE_LF
		{
			newLeafNode(this_LF_1, grammarAccess.getSwapAccess().getLFTerminalRuleCall_1());
		}
		this_TAB_2=RULE_TAB
		{
			newLeafNode(this_TAB_2, grammarAccess.getSwapAccess().getTABTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleDiscard
entryRuleDiscard returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDiscardRule()); }
	iv_ruleDiscard=ruleDiscard
	{ $current=$iv_ruleDiscard.current; }
	EOF;

// Rule Discard
ruleDiscard returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDiscardAccess().getDiscardAction_0(),
					$current);
			}
		)
		this_LF_1=RULE_LF
		{
			newLeafNode(this_LF_1, grammarAccess.getDiscardAccess().getLFTerminalRuleCall_1());
		}
		this_LF_2=RULE_LF
		{
			newLeafNode(this_LF_2, grammarAccess.getDiscardAccess().getLFTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleSlide
entryRuleSlide returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSlideRule()); }
	iv_ruleSlide=ruleSlide
	{ $current=$iv_ruleSlide.current; }
	EOF;

// Rule Slide
ruleSlide returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSlideAccess().getSlideAction_0(),
					$current);
			}
		)
		this_TAB_1=RULE_TAB
		{
			newLeafNode(this_TAB_1, grammarAccess.getSlideAccess().getTABTerminalRuleCall_1());
		}
		this_LF_2=RULE_LF
		{
			newLeafNode(this_LF_2, grammarAccess.getSlideAccess().getLFTerminalRuleCall_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSlideAccess().getNumberNumberParserRuleCall_3_0());
				}
				lv_number_3_0=ruleNumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSlideRule());
					}
					set(
						$current,
						"number",
						lv_number_3_0,
						"ac.soton.java.whitespace.WhiteSpace.Number");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleArithmetic
entryRuleArithmetic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArithmeticRule()); }
	iv_ruleArithmetic=ruleArithmetic
	{ $current=$iv_ruleArithmetic.current; }
	EOF;

// Rule Arithmetic
ruleArithmetic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_TAB_0=RULE_TAB
		{
			newLeafNode(this_TAB_0, grammarAccess.getArithmeticAccess().getTABTerminalRuleCall_0());
		}
		this_SPACE_1=RULE_SPACE
		{
			newLeafNode(this_SPACE_1, grammarAccess.getArithmeticAccess().getSPACETerminalRuleCall_1());
		}
		(
			{
				newCompositeNode(grammarAccess.getArithmeticAccess().getAdditionParserRuleCall_2_0());
			}
			this_Addition_2=ruleAddition
			{
				$current = $this_Addition_2.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getArithmeticAccess().getSubtractionParserRuleCall_2_1());
			}
			this_Subtraction_3=ruleSubtraction
			{
				$current = $this_Subtraction_3.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getArithmeticAccess().getMultiplicationParserRuleCall_2_2());
			}
			this_Multiplication_4=ruleMultiplication
			{
				$current = $this_Multiplication_4.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getArithmeticAccess().getDivisionParserRuleCall_2_3());
			}
			this_Division_5=ruleDivision
			{
				$current = $this_Division_5.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getArithmeticAccess().getModuloParserRuleCall_2_4());
			}
			this_Modulo_6=ruleModulo
			{
				$current = $this_Modulo_6.current;
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	iv_ruleAddition=ruleAddition
	{ $current=$iv_ruleAddition.current; }
	EOF;

// Rule Addition
ruleAddition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAdditionAccess().getAdditionAction_0(),
					$current);
			}
		)
		this_SPACE_1=RULE_SPACE
		{
			newLeafNode(this_SPACE_1, grammarAccess.getAdditionAccess().getSPACETerminalRuleCall_1());
		}
		this_SPACE_2=RULE_SPACE
		{
			newLeafNode(this_SPACE_2, grammarAccess.getAdditionAccess().getSPACETerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleSubtraction
entryRuleSubtraction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubtractionRule()); }
	iv_ruleSubtraction=ruleSubtraction
	{ $current=$iv_ruleSubtraction.current; }
	EOF;

// Rule Subtraction
ruleSubtraction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSubtractionAccess().getSubtractionAction_0(),
					$current);
			}
		)
		this_SPACE_1=RULE_SPACE
		{
			newLeafNode(this_SPACE_1, grammarAccess.getSubtractionAccess().getSPACETerminalRuleCall_1());
		}
		this_TAB_2=RULE_TAB
		{
			newLeafNode(this_TAB_2, grammarAccess.getSubtractionAccess().getTABTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	iv_ruleMultiplication=ruleMultiplication
	{ $current=$iv_ruleMultiplication.current; }
	EOF;

// Rule Multiplication
ruleMultiplication returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMultiplicationAccess().getMultiplicationAction_0(),
					$current);
			}
		)
		this_SPACE_1=RULE_SPACE
		{
			newLeafNode(this_SPACE_1, grammarAccess.getMultiplicationAccess().getSPACETerminalRuleCall_1());
		}
		this_LF_2=RULE_LF
		{
			newLeafNode(this_LF_2, grammarAccess.getMultiplicationAccess().getLFTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleDivision
entryRuleDivision returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDivisionRule()); }
	iv_ruleDivision=ruleDivision
	{ $current=$iv_ruleDivision.current; }
	EOF;

// Rule Division
ruleDivision returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDivisionAccess().getDivisionAction_0(),
					$current);
			}
		)
		this_TAB_1=RULE_TAB
		{
			newLeafNode(this_TAB_1, grammarAccess.getDivisionAccess().getTABTerminalRuleCall_1());
		}
		this_SPACE_2=RULE_SPACE
		{
			newLeafNode(this_SPACE_2, grammarAccess.getDivisionAccess().getSPACETerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleModulo
entryRuleModulo returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModuloRule()); }
	iv_ruleModulo=ruleModulo
	{ $current=$iv_ruleModulo.current; }
	EOF;

// Rule Modulo
ruleModulo returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getModuloAccess().getModuloAction_0(),
					$current);
			}
		)
		this_TAB_1=RULE_TAB
		{
			newLeafNode(this_TAB_1, grammarAccess.getModuloAccess().getTABTerminalRuleCall_1());
		}
		this_TAB_2=RULE_TAB
		{
			newLeafNode(this_TAB_2, grammarAccess.getModuloAccess().getTABTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleHeapAccess
entryRuleHeapAccess returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHeapAccessRule()); }
	iv_ruleHeapAccess=ruleHeapAccess
	{ $current=$iv_ruleHeapAccess.current; }
	EOF;

// Rule HeapAccess
ruleHeapAccess returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_TAB_0=RULE_TAB
		{
			newLeafNode(this_TAB_0, grammarAccess.getHeapAccessAccess().getTABTerminalRuleCall_0());
		}
		this_TAB_1=RULE_TAB
		{
			newLeafNode(this_TAB_1, grammarAccess.getHeapAccessAccess().getTABTerminalRuleCall_1());
		}
		(
			{
				newCompositeNode(grammarAccess.getHeapAccessAccess().getStoreParserRuleCall_2_0());
			}
			this_Store_2=ruleStore
			{
				$current = $this_Store_2.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getHeapAccessAccess().getRetrieveParserRuleCall_2_1());
			}
			this_Retrieve_3=ruleRetrieve
			{
				$current = $this_Retrieve_3.current;
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleStore
entryRuleStore returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStoreRule()); }
	iv_ruleStore=ruleStore
	{ $current=$iv_ruleStore.current; }
	EOF;

// Rule Store
ruleStore returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStoreAccess().getStoreAction_0(),
					$current);
			}
		)
		this_SPACE_1=RULE_SPACE
		{
			newLeafNode(this_SPACE_1, grammarAccess.getStoreAccess().getSPACETerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleRetrieve
entryRuleRetrieve returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRetrieveRule()); }
	iv_ruleRetrieve=ruleRetrieve
	{ $current=$iv_ruleRetrieve.current; }
	EOF;

// Rule Retrieve
ruleRetrieve returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRetrieveAccess().getRetrieveAction_0(),
					$current);
			}
		)
		this_TAB_1=RULE_TAB
		{
			newLeafNode(this_TAB_1, grammarAccess.getRetrieveAccess().getTABTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleFlowControl
entryRuleFlowControl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFlowControlRule()); }
	iv_ruleFlowControl=ruleFlowControl
	{ $current=$iv_ruleFlowControl.current; }
	EOF;

// Rule FlowControl
ruleFlowControl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_LF_0=RULE_LF
		{
			newLeafNode(this_LF_0, grammarAccess.getFlowControlAccess().getLFTerminalRuleCall_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getFlowControlAccess().getMarkLocationParserRuleCall_1_0());
			}
			this_MarkLocation_1=ruleMarkLocation
			{
				$current = $this_MarkLocation_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getFlowControlAccess().getCallSubroutineParserRuleCall_1_1());
			}
			this_CallSubroutine_2=ruleCallSubroutine
			{
				$current = $this_CallSubroutine_2.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getFlowControlAccess().getUnconditionalJumpParserRuleCall_1_2());
			}
			this_UnconditionalJump_3=ruleUnconditionalJump
			{
				$current = $this_UnconditionalJump_3.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getFlowControlAccess().getZeroJumpParserRuleCall_1_3());
			}
			this_ZeroJump_4=ruleZeroJump
			{
				$current = $this_ZeroJump_4.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getFlowControlAccess().getNegativeJumpParserRuleCall_1_4());
			}
			this_NegativeJump_5=ruleNegativeJump
			{
				$current = $this_NegativeJump_5.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getFlowControlAccess().getEndSubroutineParserRuleCall_1_5());
			}
			this_EndSubroutine_6=ruleEndSubroutine
			{
				$current = $this_EndSubroutine_6.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getFlowControlAccess().getEndProgramParserRuleCall_1_6());
			}
			this_EndProgram_7=ruleEndProgram
			{
				$current = $this_EndProgram_7.current;
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleMarkLocation
entryRuleMarkLocation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMarkLocationRule()); }
	iv_ruleMarkLocation=ruleMarkLocation
	{ $current=$iv_ruleMarkLocation.current; }
	EOF;

// Rule MarkLocation
ruleMarkLocation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMarkLocationAccess().getMarkLocationAction_0(),
					$current);
			}
		)
		this_SPACE_1=RULE_SPACE
		{
			newLeafNode(this_SPACE_1, grammarAccess.getMarkLocationAccess().getSPACETerminalRuleCall_1());
		}
		this_SPACE_2=RULE_SPACE
		{
			newLeafNode(this_SPACE_2, grammarAccess.getMarkLocationAccess().getSPACETerminalRuleCall_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMarkLocationAccess().getLabelLabelParserRuleCall_3_0());
				}
				lv_label_3_0=ruleLabel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMarkLocationRule());
					}
					set(
						$current,
						"label",
						lv_label_3_0,
						"ac.soton.java.whitespace.WhiteSpace.Label");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCallSubroutine
entryRuleCallSubroutine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCallSubroutineRule()); }
	iv_ruleCallSubroutine=ruleCallSubroutine
	{ $current=$iv_ruleCallSubroutine.current; }
	EOF;

// Rule CallSubroutine
ruleCallSubroutine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCallSubroutineAccess().getCallSubroutineAction_0(),
					$current);
			}
		)
		this_SPACE_1=RULE_SPACE
		{
			newLeafNode(this_SPACE_1, grammarAccess.getCallSubroutineAccess().getSPACETerminalRuleCall_1());
		}
		this_TAB_2=RULE_TAB
		{
			newLeafNode(this_TAB_2, grammarAccess.getCallSubroutineAccess().getTABTerminalRuleCall_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCallSubroutineAccess().getLabelLabelParserRuleCall_3_0());
				}
				lv_label_3_0=ruleLabel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCallSubroutineRule());
					}
					set(
						$current,
						"label",
						lv_label_3_0,
						"ac.soton.java.whitespace.WhiteSpace.Label");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleUnconditionalJump
entryRuleUnconditionalJump returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnconditionalJumpRule()); }
	iv_ruleUnconditionalJump=ruleUnconditionalJump
	{ $current=$iv_ruleUnconditionalJump.current; }
	EOF;

// Rule UnconditionalJump
ruleUnconditionalJump returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getUnconditionalJumpAccess().getUnconditionalJumpAction_0(),
					$current);
			}
		)
		this_SPACE_1=RULE_SPACE
		{
			newLeafNode(this_SPACE_1, grammarAccess.getUnconditionalJumpAccess().getSPACETerminalRuleCall_1());
		}
		this_LF_2=RULE_LF
		{
			newLeafNode(this_LF_2, grammarAccess.getUnconditionalJumpAccess().getLFTerminalRuleCall_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUnconditionalJumpAccess().getLabelLabelParserRuleCall_3_0());
				}
				lv_label_3_0=ruleLabel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnconditionalJumpRule());
					}
					set(
						$current,
						"label",
						lv_label_3_0,
						"ac.soton.java.whitespace.WhiteSpace.Label");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleZeroJump
entryRuleZeroJump returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getZeroJumpRule()); }
	iv_ruleZeroJump=ruleZeroJump
	{ $current=$iv_ruleZeroJump.current; }
	EOF;

// Rule ZeroJump
ruleZeroJump returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getZeroJumpAccess().getZeroJumpAction_0(),
					$current);
			}
		)
		this_TAB_1=RULE_TAB
		{
			newLeafNode(this_TAB_1, grammarAccess.getZeroJumpAccess().getTABTerminalRuleCall_1());
		}
		this_SPACE_2=RULE_SPACE
		{
			newLeafNode(this_SPACE_2, grammarAccess.getZeroJumpAccess().getSPACETerminalRuleCall_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getZeroJumpAccess().getLabelLabelParserRuleCall_3_0());
				}
				lv_label_3_0=ruleLabel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getZeroJumpRule());
					}
					set(
						$current,
						"label",
						lv_label_3_0,
						"ac.soton.java.whitespace.WhiteSpace.Label");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNegativeJump
entryRuleNegativeJump returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNegativeJumpRule()); }
	iv_ruleNegativeJump=ruleNegativeJump
	{ $current=$iv_ruleNegativeJump.current; }
	EOF;

// Rule NegativeJump
ruleNegativeJump returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNegativeJumpAccess().getNegativeJumpAction_0(),
					$current);
			}
		)
		this_TAB_1=RULE_TAB
		{
			newLeafNode(this_TAB_1, grammarAccess.getNegativeJumpAccess().getTABTerminalRuleCall_1());
		}
		this_TAB_2=RULE_TAB
		{
			newLeafNode(this_TAB_2, grammarAccess.getNegativeJumpAccess().getTABTerminalRuleCall_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNegativeJumpAccess().getLabelLabelParserRuleCall_3_0());
				}
				lv_label_3_0=ruleLabel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNegativeJumpRule());
					}
					set(
						$current,
						"label",
						lv_label_3_0,
						"ac.soton.java.whitespace.WhiteSpace.Label");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEndSubroutine
entryRuleEndSubroutine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEndSubroutineRule()); }
	iv_ruleEndSubroutine=ruleEndSubroutine
	{ $current=$iv_ruleEndSubroutine.current; }
	EOF;

// Rule EndSubroutine
ruleEndSubroutine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEndSubroutineAccess().getEndSubroutineAction_0(),
					$current);
			}
		)
		this_TAB_1=RULE_TAB
		{
			newLeafNode(this_TAB_1, grammarAccess.getEndSubroutineAccess().getTABTerminalRuleCall_1());
		}
		this_LF_2=RULE_LF
		{
			newLeafNode(this_LF_2, grammarAccess.getEndSubroutineAccess().getLFTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleEndProgram
entryRuleEndProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEndProgramRule()); }
	iv_ruleEndProgram=ruleEndProgram
	{ $current=$iv_ruleEndProgram.current; }
	EOF;

// Rule EndProgram
ruleEndProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEndProgramAccess().getEndProgramAction_0(),
					$current);
			}
		)
		this_LF_1=RULE_LF
		{
			newLeafNode(this_LF_1, grammarAccess.getEndProgramAccess().getLFTerminalRuleCall_1());
		}
		this_LF_2=RULE_LF
		{
			newLeafNode(this_LF_2, grammarAccess.getEndProgramAccess().getLFTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleIO
entryRuleIO returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIORule()); }
	iv_ruleIO=ruleIO
	{ $current=$iv_ruleIO.current; }
	EOF;

// Rule IO
ruleIO returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_TAB_0=RULE_TAB
		{
			newLeafNode(this_TAB_0, grammarAccess.getIOAccess().getTABTerminalRuleCall_0());
		}
		this_LF_1=RULE_LF
		{
			newLeafNode(this_LF_1, grammarAccess.getIOAccess().getLFTerminalRuleCall_1());
		}
		(
			{
				newCompositeNode(grammarAccess.getIOAccess().getOutputCharacterParserRuleCall_2_0());
			}
			this_OutputCharacter_2=ruleOutputCharacter
			{
				$current = $this_OutputCharacter_2.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getIOAccess().getOutputNumberParserRuleCall_2_1());
			}
			this_OutputNumber_3=ruleOutputNumber
			{
				$current = $this_OutputNumber_3.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getIOAccess().getReadCharacterParserRuleCall_2_2());
			}
			this_ReadCharacter_4=ruleReadCharacter
			{
				$current = $this_ReadCharacter_4.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getIOAccess().getReadNumberParserRuleCall_2_3());
			}
			this_ReadNumber_5=ruleReadNumber
			{
				$current = $this_ReadNumber_5.current;
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleOutputCharacter
entryRuleOutputCharacter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutputCharacterRule()); }
	iv_ruleOutputCharacter=ruleOutputCharacter
	{ $current=$iv_ruleOutputCharacter.current; }
	EOF;

// Rule OutputCharacter
ruleOutputCharacter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getOutputCharacterAccess().getOutputCharacterAction_0(),
					$current);
			}
		)
		this_SPACE_1=RULE_SPACE
		{
			newLeafNode(this_SPACE_1, grammarAccess.getOutputCharacterAccess().getSPACETerminalRuleCall_1());
		}
		this_SPACE_2=RULE_SPACE
		{
			newLeafNode(this_SPACE_2, grammarAccess.getOutputCharacterAccess().getSPACETerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleOutputNumber
entryRuleOutputNumber returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutputNumberRule()); }
	iv_ruleOutputNumber=ruleOutputNumber
	{ $current=$iv_ruleOutputNumber.current; }
	EOF;

// Rule OutputNumber
ruleOutputNumber returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getOutputNumberAccess().getOutputNumberAction_0(),
					$current);
			}
		)
		this_SPACE_1=RULE_SPACE
		{
			newLeafNode(this_SPACE_1, grammarAccess.getOutputNumberAccess().getSPACETerminalRuleCall_1());
		}
		this_TAB_2=RULE_TAB
		{
			newLeafNode(this_TAB_2, grammarAccess.getOutputNumberAccess().getTABTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleReadCharacter
entryRuleReadCharacter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReadCharacterRule()); }
	iv_ruleReadCharacter=ruleReadCharacter
	{ $current=$iv_ruleReadCharacter.current; }
	EOF;

// Rule ReadCharacter
ruleReadCharacter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getReadCharacterAccess().getReadCharacterAction_0(),
					$current);
			}
		)
		this_TAB_1=RULE_TAB
		{
			newLeafNode(this_TAB_1, grammarAccess.getReadCharacterAccess().getTABTerminalRuleCall_1());
		}
		this_SPACE_2=RULE_SPACE
		{
			newLeafNode(this_SPACE_2, grammarAccess.getReadCharacterAccess().getSPACETerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleReadNumber
entryRuleReadNumber returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReadNumberRule()); }
	iv_ruleReadNumber=ruleReadNumber
	{ $current=$iv_ruleReadNumber.current; }
	EOF;

// Rule ReadNumber
ruleReadNumber returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getReadNumberAccess().getReadNumberAction_0(),
					$current);
			}
		)
		this_TAB_1=RULE_TAB
		{
			newLeafNode(this_TAB_1, grammarAccess.getReadNumberAccess().getTABTerminalRuleCall_1());
		}
		this_TAB_2=RULE_TAB
		{
			newLeafNode(this_TAB_2, grammarAccess.getReadNumberAccess().getTABTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleNumber
entryRuleNumber returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNumberRule()); }
	iv_ruleNumber=ruleNumber
	{ $current=$iv_ruleNumber.current.getText(); }
	EOF;

// Rule Number
ruleNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_SPACE_0=RULE_SPACE
			{
				$current.merge(this_SPACE_0);
			}
			{
				newLeafNode(this_SPACE_0, grammarAccess.getNumberAccess().getSPACETerminalRuleCall_0_0());
			}
			    |
			this_TAB_1=RULE_TAB
			{
				$current.merge(this_TAB_1);
			}
			{
				newLeafNode(this_TAB_1, grammarAccess.getNumberAccess().getTABTerminalRuleCall_0_1());
			}
		)+
		this_LF_2=RULE_LF
		{
			$current.merge(this_LF_2);
		}
		{
			newLeafNode(this_LF_2, grammarAccess.getNumberAccess().getLFTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleLabel
entryRuleLabel returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLabelRule()); }
	iv_ruleLabel=ruleLabel
	{ $current=$iv_ruleLabel.current.getText(); }
	EOF;

// Rule Label
ruleLabel returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_SPACE_0=RULE_SPACE
			{
				$current.merge(this_SPACE_0);
			}
			{
				newLeafNode(this_SPACE_0, grammarAccess.getLabelAccess().getSPACETerminalRuleCall_0_0());
			}
			    |
			this_TAB_1=RULE_TAB
			{
				$current.merge(this_TAB_1);
			}
			{
				newLeafNode(this_TAB_1, grammarAccess.getLabelAccess().getTABTerminalRuleCall_0_1());
			}
		)+
		this_LF_2=RULE_LF
		{
			$current.merge(this_LF_2);
		}
		{
			newLeafNode(this_LF_2, grammarAccess.getLabelAccess().getLFTerminalRuleCall_1());
		}
	)
;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SPACE : ' ';

RULE_TAB : '\t';

RULE_LF : '\n';

RULE_NOTWS : ~((' '|'\t'|'\n'))+;
