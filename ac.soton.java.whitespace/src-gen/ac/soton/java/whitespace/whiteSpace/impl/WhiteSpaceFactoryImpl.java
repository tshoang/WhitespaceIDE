/**
 * generated by Xtext 2.27.0
 */
package ac.soton.java.whitespace.whiteSpace.impl;

import ac.soton.java.whitespace.whiteSpace.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class WhiteSpaceFactoryImpl extends EFactoryImpl implements WhiteSpaceFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static WhiteSpaceFactory init()
  {
    try
    {
      WhiteSpaceFactory theWhiteSpaceFactory = (WhiteSpaceFactory)EPackage.Registry.INSTANCE.getEFactory(WhiteSpacePackage.eNS_URI);
      if (theWhiteSpaceFactory != null)
      {
        return theWhiteSpaceFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new WhiteSpaceFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WhiteSpaceFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case WhiteSpacePackage.WS_PROGRAM: return createWSProgram();
      case WhiteSpacePackage.STATEMENT: return createStatement();
      case WhiteSpacePackage.STACK_MANIPULATION: return createStackManipulation();
      case WhiteSpacePackage.PUSH: return createPush();
      case WhiteSpacePackage.DUPLICATE: return createDuplicate();
      case WhiteSpacePackage.COPY: return createCopy();
      case WhiteSpacePackage.SWAP: return createSwap();
      case WhiteSpacePackage.DISCARD: return createDiscard();
      case WhiteSpacePackage.SLIDE: return createSlide();
      case WhiteSpacePackage.ARITHMETIC: return createArithmetic();
      case WhiteSpacePackage.ADDITION: return createAddition();
      case WhiteSpacePackage.SUBTRACTION: return createSubtraction();
      case WhiteSpacePackage.MULTIPLICATION: return createMultiplication();
      case WhiteSpacePackage.DIVISION: return createDivision();
      case WhiteSpacePackage.MODULO: return createModulo();
      case WhiteSpacePackage.HEAP_ACCESS: return createHeapAccess();
      case WhiteSpacePackage.STORE: return createStore();
      case WhiteSpacePackage.RETRIEVE: return createRetrieve();
      case WhiteSpacePackage.FLOW_CONTROL: return createFlowControl();
      case WhiteSpacePackage.MARK_LOCATION: return createMarkLocation();
      case WhiteSpacePackage.CALL_SUBROUTINE: return createCallSubroutine();
      case WhiteSpacePackage.UNCONDITIONAL_JUMP: return createUnconditionalJump();
      case WhiteSpacePackage.ZERO_JUMP: return createZeroJump();
      case WhiteSpacePackage.NEGATIVE_JUMP: return createNegativeJump();
      case WhiteSpacePackage.END_SUBROUTINE: return createEndSubroutine();
      case WhiteSpacePackage.END_PROGRAM: return createEndProgram();
      case WhiteSpacePackage.IO: return createIO();
      case WhiteSpacePackage.OUTPUT_CHARACTER: return createOutputCharacter();
      case WhiteSpacePackage.OUTPUT_NUMBER: return createOutputNumber();
      case WhiteSpacePackage.READ_CHARACTER: return createReadCharacter();
      case WhiteSpacePackage.READ_NUMBER: return createReadNumber();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WSProgram createWSProgram()
  {
    WSProgramImpl wsProgram = new WSProgramImpl();
    return wsProgram;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StackManipulation createStackManipulation()
  {
    StackManipulationImpl stackManipulation = new StackManipulationImpl();
    return stackManipulation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Push createPush()
  {
    PushImpl push = new PushImpl();
    return push;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Duplicate createDuplicate()
  {
    DuplicateImpl duplicate = new DuplicateImpl();
    return duplicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Copy createCopy()
  {
    CopyImpl copy = new CopyImpl();
    return copy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Swap createSwap()
  {
    SwapImpl swap = new SwapImpl();
    return swap;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Discard createDiscard()
  {
    DiscardImpl discard = new DiscardImpl();
    return discard;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Slide createSlide()
  {
    SlideImpl slide = new SlideImpl();
    return slide;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Arithmetic createArithmetic()
  {
    ArithmeticImpl arithmetic = new ArithmeticImpl();
    return arithmetic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Addition createAddition()
  {
    AdditionImpl addition = new AdditionImpl();
    return addition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Subtraction createSubtraction()
  {
    SubtractionImpl subtraction = new SubtractionImpl();
    return subtraction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Multiplication createMultiplication()
  {
    MultiplicationImpl multiplication = new MultiplicationImpl();
    return multiplication;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Division createDivision()
  {
    DivisionImpl division = new DivisionImpl();
    return division;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Modulo createModulo()
  {
    ModuloImpl modulo = new ModuloImpl();
    return modulo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HeapAccess createHeapAccess()
  {
    HeapAccessImpl heapAccess = new HeapAccessImpl();
    return heapAccess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Store createStore()
  {
    StoreImpl store = new StoreImpl();
    return store;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Retrieve createRetrieve()
  {
    RetrieveImpl retrieve = new RetrieveImpl();
    return retrieve;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FlowControl createFlowControl()
  {
    FlowControlImpl flowControl = new FlowControlImpl();
    return flowControl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MarkLocation createMarkLocation()
  {
    MarkLocationImpl markLocation = new MarkLocationImpl();
    return markLocation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CallSubroutine createCallSubroutine()
  {
    CallSubroutineImpl callSubroutine = new CallSubroutineImpl();
    return callSubroutine;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnconditionalJump createUnconditionalJump()
  {
    UnconditionalJumpImpl unconditionalJump = new UnconditionalJumpImpl();
    return unconditionalJump;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ZeroJump createZeroJump()
  {
    ZeroJumpImpl zeroJump = new ZeroJumpImpl();
    return zeroJump;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NegativeJump createNegativeJump()
  {
    NegativeJumpImpl negativeJump = new NegativeJumpImpl();
    return negativeJump;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EndSubroutine createEndSubroutine()
  {
    EndSubroutineImpl endSubroutine = new EndSubroutineImpl();
    return endSubroutine;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EndProgram createEndProgram()
  {
    EndProgramImpl endProgram = new EndProgramImpl();
    return endProgram;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IO createIO()
  {
    IOImpl io = new IOImpl();
    return io;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OutputCharacter createOutputCharacter()
  {
    OutputCharacterImpl outputCharacter = new OutputCharacterImpl();
    return outputCharacter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OutputNumber createOutputNumber()
  {
    OutputNumberImpl outputNumber = new OutputNumberImpl();
    return outputNumber;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReadCharacter createReadCharacter()
  {
    ReadCharacterImpl readCharacter = new ReadCharacterImpl();
    return readCharacter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReadNumber createReadNumber()
  {
    ReadNumberImpl readNumber = new ReadNumberImpl();
    return readNumber;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WhiteSpacePackage getWhiteSpacePackage()
  {
    return (WhiteSpacePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static WhiteSpacePackage getPackage()
  {
    return WhiteSpacePackage.eINSTANCE;
  }

} //WhiteSpaceFactoryImpl
