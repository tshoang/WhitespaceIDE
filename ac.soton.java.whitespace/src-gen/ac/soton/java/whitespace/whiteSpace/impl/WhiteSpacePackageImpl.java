/**
 * generated by Xtext 2.27.0
 */
package ac.soton.java.whitespace.whiteSpace.impl;

import ac.soton.java.whitespace.whiteSpace.Addition;
import ac.soton.java.whitespace.whiteSpace.Arithmetic;
import ac.soton.java.whitespace.whiteSpace.CallSubroutine;
import ac.soton.java.whitespace.whiteSpace.Copy;
import ac.soton.java.whitespace.whiteSpace.Discard;
import ac.soton.java.whitespace.whiteSpace.Division;
import ac.soton.java.whitespace.whiteSpace.Duplicate;
import ac.soton.java.whitespace.whiteSpace.EndProgram;
import ac.soton.java.whitespace.whiteSpace.EndSubroutine;
import ac.soton.java.whitespace.whiteSpace.FlowControl;
import ac.soton.java.whitespace.whiteSpace.HeapAccess;
import ac.soton.java.whitespace.whiteSpace.MarkLocation;
import ac.soton.java.whitespace.whiteSpace.Modulo;
import ac.soton.java.whitespace.whiteSpace.Multiplication;
import ac.soton.java.whitespace.whiteSpace.NegativeJump;
import ac.soton.java.whitespace.whiteSpace.OutputCharacter;
import ac.soton.java.whitespace.whiteSpace.OutputNumber;
import ac.soton.java.whitespace.whiteSpace.Push;
import ac.soton.java.whitespace.whiteSpace.ReadCharacter;
import ac.soton.java.whitespace.whiteSpace.ReadNumber;
import ac.soton.java.whitespace.whiteSpace.Retrieve;
import ac.soton.java.whitespace.whiteSpace.Slide;
import ac.soton.java.whitespace.whiteSpace.StackManipulation;
import ac.soton.java.whitespace.whiteSpace.Statement;
import ac.soton.java.whitespace.whiteSpace.Store;
import ac.soton.java.whitespace.whiteSpace.Subtraction;
import ac.soton.java.whitespace.whiteSpace.Swap;
import ac.soton.java.whitespace.whiteSpace.UnconditionalJump;
import ac.soton.java.whitespace.whiteSpace.WSProgram;
import ac.soton.java.whitespace.whiteSpace.WhiteSpaceFactory;
import ac.soton.java.whitespace.whiteSpace.WhiteSpacePackage;
import ac.soton.java.whitespace.whiteSpace.ZeroJump;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class WhiteSpacePackageImpl extends EPackageImpl implements WhiteSpacePackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass wsProgramEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stackManipulationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass pushEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass duplicateEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass copyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass swapEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass discardEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass slideEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass arithmeticEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass additionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass subtractionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass multiplicationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass divisionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass moduloEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass heapAccessEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass storeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass retrieveEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass flowControlEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass markLocationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass callSubroutineEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass unconditionalJumpEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass zeroJumpEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass negativeJumpEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass endSubroutineEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass endProgramEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ioEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass outputCharacterEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass outputNumberEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass readCharacterEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass readNumberEClass = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see ac.soton.java.whitespace.whiteSpace.WhiteSpacePackage#eNS_URI
   * @see #init()
   * @generated
   */
  private WhiteSpacePackageImpl()
  {
    super(eNS_URI, WhiteSpaceFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link WhiteSpacePackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static WhiteSpacePackage init()
  {
    if (isInited) return (WhiteSpacePackage)EPackage.Registry.INSTANCE.getEPackage(WhiteSpacePackage.eNS_URI);

    // Obtain or create and register package
    Object registeredWhiteSpacePackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    WhiteSpacePackageImpl theWhiteSpacePackage = registeredWhiteSpacePackage instanceof WhiteSpacePackageImpl ? (WhiteSpacePackageImpl)registeredWhiteSpacePackage : new WhiteSpacePackageImpl();

    isInited = true;

    // Create package meta-data objects
    theWhiteSpacePackage.createPackageContents();

    // Initialize created meta-data
    theWhiteSpacePackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theWhiteSpacePackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(WhiteSpacePackage.eNS_URI, theWhiteSpacePackage);
    return theWhiteSpacePackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getWSProgram()
  {
    return wsProgramEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getWSProgram_Statements()
  {
    return (EReference)wsProgramEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStatement()
  {
    return statementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStackManipulation()
  {
    return stackManipulationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPush()
  {
    return pushEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPush_Number()
  {
    return (EAttribute)pushEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDuplicate()
  {
    return duplicateEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCopy()
  {
    return copyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCopy_Number()
  {
    return (EAttribute)copyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSwap()
  {
    return swapEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDiscard()
  {
    return discardEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSlide()
  {
    return slideEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSlide_Number()
  {
    return (EAttribute)slideEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getArithmetic()
  {
    return arithmeticEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAddition()
  {
    return additionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSubtraction()
  {
    return subtractionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMultiplication()
  {
    return multiplicationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDivision()
  {
    return divisionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getModulo()
  {
    return moduloEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getHeapAccess()
  {
    return heapAccessEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStore()
  {
    return storeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRetrieve()
  {
    return retrieveEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getFlowControl()
  {
    return flowControlEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMarkLocation()
  {
    return markLocationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMarkLocation_Label()
  {
    return (EAttribute)markLocationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCallSubroutine()
  {
    return callSubroutineEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCallSubroutine_Label()
  {
    return (EAttribute)callSubroutineEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getUnconditionalJump()
  {
    return unconditionalJumpEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getUnconditionalJump_Label()
  {
    return (EAttribute)unconditionalJumpEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getZeroJump()
  {
    return zeroJumpEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getZeroJump_Label()
  {
    return (EAttribute)zeroJumpEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getNegativeJump()
  {
    return negativeJumpEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getNegativeJump_Label()
  {
    return (EAttribute)negativeJumpEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getEndSubroutine()
  {
    return endSubroutineEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getEndProgram()
  {
    return endProgramEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getIO()
  {
    return ioEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getOutputCharacter()
  {
    return outputCharacterEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getOutputNumber()
  {
    return outputNumberEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getReadCharacter()
  {
    return readCharacterEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getReadNumber()
  {
    return readNumberEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WhiteSpaceFactory getWhiteSpaceFactory()
  {
    return (WhiteSpaceFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    wsProgramEClass = createEClass(WS_PROGRAM);
    createEReference(wsProgramEClass, WS_PROGRAM__STATEMENTS);

    statementEClass = createEClass(STATEMENT);

    stackManipulationEClass = createEClass(STACK_MANIPULATION);

    pushEClass = createEClass(PUSH);
    createEAttribute(pushEClass, PUSH__NUMBER);

    duplicateEClass = createEClass(DUPLICATE);

    copyEClass = createEClass(COPY);
    createEAttribute(copyEClass, COPY__NUMBER);

    swapEClass = createEClass(SWAP);

    discardEClass = createEClass(DISCARD);

    slideEClass = createEClass(SLIDE);
    createEAttribute(slideEClass, SLIDE__NUMBER);

    arithmeticEClass = createEClass(ARITHMETIC);

    additionEClass = createEClass(ADDITION);

    subtractionEClass = createEClass(SUBTRACTION);

    multiplicationEClass = createEClass(MULTIPLICATION);

    divisionEClass = createEClass(DIVISION);

    moduloEClass = createEClass(MODULO);

    heapAccessEClass = createEClass(HEAP_ACCESS);

    storeEClass = createEClass(STORE);

    retrieveEClass = createEClass(RETRIEVE);

    flowControlEClass = createEClass(FLOW_CONTROL);

    markLocationEClass = createEClass(MARK_LOCATION);
    createEAttribute(markLocationEClass, MARK_LOCATION__LABEL);

    callSubroutineEClass = createEClass(CALL_SUBROUTINE);
    createEAttribute(callSubroutineEClass, CALL_SUBROUTINE__LABEL);

    unconditionalJumpEClass = createEClass(UNCONDITIONAL_JUMP);
    createEAttribute(unconditionalJumpEClass, UNCONDITIONAL_JUMP__LABEL);

    zeroJumpEClass = createEClass(ZERO_JUMP);
    createEAttribute(zeroJumpEClass, ZERO_JUMP__LABEL);

    negativeJumpEClass = createEClass(NEGATIVE_JUMP);
    createEAttribute(negativeJumpEClass, NEGATIVE_JUMP__LABEL);

    endSubroutineEClass = createEClass(END_SUBROUTINE);

    endProgramEClass = createEClass(END_PROGRAM);

    ioEClass = createEClass(IO);

    outputCharacterEClass = createEClass(OUTPUT_CHARACTER);

    outputNumberEClass = createEClass(OUTPUT_NUMBER);

    readCharacterEClass = createEClass(READ_CHARACTER);

    readNumberEClass = createEClass(READ_NUMBER);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    stackManipulationEClass.getESuperTypes().add(this.getStatement());
    pushEClass.getESuperTypes().add(this.getStackManipulation());
    duplicateEClass.getESuperTypes().add(this.getStackManipulation());
    copyEClass.getESuperTypes().add(this.getStackManipulation());
    swapEClass.getESuperTypes().add(this.getStackManipulation());
    discardEClass.getESuperTypes().add(this.getStackManipulation());
    slideEClass.getESuperTypes().add(this.getStackManipulation());
    arithmeticEClass.getESuperTypes().add(this.getStatement());
    additionEClass.getESuperTypes().add(this.getArithmetic());
    subtractionEClass.getESuperTypes().add(this.getArithmetic());
    multiplicationEClass.getESuperTypes().add(this.getArithmetic());
    divisionEClass.getESuperTypes().add(this.getArithmetic());
    moduloEClass.getESuperTypes().add(this.getArithmetic());
    heapAccessEClass.getESuperTypes().add(this.getStatement());
    storeEClass.getESuperTypes().add(this.getHeapAccess());
    retrieveEClass.getESuperTypes().add(this.getHeapAccess());
    flowControlEClass.getESuperTypes().add(this.getStatement());
    markLocationEClass.getESuperTypes().add(this.getFlowControl());
    callSubroutineEClass.getESuperTypes().add(this.getFlowControl());
    unconditionalJumpEClass.getESuperTypes().add(this.getFlowControl());
    zeroJumpEClass.getESuperTypes().add(this.getFlowControl());
    negativeJumpEClass.getESuperTypes().add(this.getFlowControl());
    endSubroutineEClass.getESuperTypes().add(this.getFlowControl());
    endProgramEClass.getESuperTypes().add(this.getFlowControl());
    ioEClass.getESuperTypes().add(this.getStatement());
    outputCharacterEClass.getESuperTypes().add(this.getIO());
    outputNumberEClass.getESuperTypes().add(this.getIO());
    readCharacterEClass.getESuperTypes().add(this.getIO());
    readNumberEClass.getESuperTypes().add(this.getIO());

    // Initialize classes and features; add operations and parameters
    initEClass(wsProgramEClass, WSProgram.class, "WSProgram", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getWSProgram_Statements(), this.getStatement(), null, "statements", null, 0, -1, WSProgram.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(statementEClass, Statement.class, "Statement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(stackManipulationEClass, StackManipulation.class, "StackManipulation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(pushEClass, Push.class, "Push", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getPush_Number(), ecorePackage.getEInt(), "number", null, 0, 1, Push.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(duplicateEClass, Duplicate.class, "Duplicate", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(copyEClass, Copy.class, "Copy", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCopy_Number(), ecorePackage.getEInt(), "number", null, 0, 1, Copy.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(swapEClass, Swap.class, "Swap", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(discardEClass, Discard.class, "Discard", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(slideEClass, Slide.class, "Slide", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSlide_Number(), ecorePackage.getEInt(), "number", null, 0, 1, Slide.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(arithmeticEClass, Arithmetic.class, "Arithmetic", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(additionEClass, Addition.class, "Addition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(subtractionEClass, Subtraction.class, "Subtraction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(multiplicationEClass, Multiplication.class, "Multiplication", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(divisionEClass, Division.class, "Division", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(moduloEClass, Modulo.class, "Modulo", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(heapAccessEClass, HeapAccess.class, "HeapAccess", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(storeEClass, Store.class, "Store", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(retrieveEClass, Retrieve.class, "Retrieve", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(flowControlEClass, FlowControl.class, "FlowControl", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(markLocationEClass, MarkLocation.class, "MarkLocation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMarkLocation_Label(), ecorePackage.getEString(), "label", null, 0, 1, MarkLocation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(callSubroutineEClass, CallSubroutine.class, "CallSubroutine", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCallSubroutine_Label(), ecorePackage.getEString(), "label", null, 0, 1, CallSubroutine.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(unconditionalJumpEClass, UnconditionalJump.class, "UnconditionalJump", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getUnconditionalJump_Label(), ecorePackage.getEString(), "label", null, 0, 1, UnconditionalJump.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(zeroJumpEClass, ZeroJump.class, "ZeroJump", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getZeroJump_Label(), ecorePackage.getEString(), "label", null, 0, 1, ZeroJump.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(negativeJumpEClass, NegativeJump.class, "NegativeJump", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getNegativeJump_Label(), ecorePackage.getEString(), "label", null, 0, 1, NegativeJump.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(endSubroutineEClass, EndSubroutine.class, "EndSubroutine", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(endProgramEClass, EndProgram.class, "EndProgram", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(ioEClass, ac.soton.java.whitespace.whiteSpace.IO.class, "IO", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(outputCharacterEClass, OutputCharacter.class, "OutputCharacter", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(outputNumberEClass, OutputNumber.class, "OutputNumber", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(readCharacterEClass, ReadCharacter.class, "ReadCharacter", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(readNumberEClass, ReadNumber.class, "ReadNumber", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    // Create resource
    createResource(eNS_URI);
  }

} //WhiteSpacePackageImpl
