/**
 * generated by Xtext 2.27.0
 */
package ac.soton.java.whitespace.whiteSpace.util;

import ac.soton.java.whitespace.whiteSpace.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see ac.soton.java.whitespace.whiteSpace.WhiteSpacePackage
 * @generated
 */
public class WhiteSpaceAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static WhiteSpacePackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WhiteSpaceAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = WhiteSpacePackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WhiteSpaceSwitch<Adapter> modelSwitch =
    new WhiteSpaceSwitch<Adapter>()
    {
      @Override
      public Adapter caseWSProgram(WSProgram object)
      {
        return createWSProgramAdapter();
      }
      @Override
      public Adapter caseStatement(Statement object)
      {
        return createStatementAdapter();
      }
      @Override
      public Adapter caseStackManipulation(StackManipulation object)
      {
        return createStackManipulationAdapter();
      }
      @Override
      public Adapter casePush(Push object)
      {
        return createPushAdapter();
      }
      @Override
      public Adapter caseDuplicate(Duplicate object)
      {
        return createDuplicateAdapter();
      }
      @Override
      public Adapter caseCopy(Copy object)
      {
        return createCopyAdapter();
      }
      @Override
      public Adapter caseSwap(Swap object)
      {
        return createSwapAdapter();
      }
      @Override
      public Adapter caseDiscard(Discard object)
      {
        return createDiscardAdapter();
      }
      @Override
      public Adapter caseSlide(Slide object)
      {
        return createSlideAdapter();
      }
      @Override
      public Adapter caseArithmetic(Arithmetic object)
      {
        return createArithmeticAdapter();
      }
      @Override
      public Adapter caseAddition(Addition object)
      {
        return createAdditionAdapter();
      }
      @Override
      public Adapter caseSubtraction(Subtraction object)
      {
        return createSubtractionAdapter();
      }
      @Override
      public Adapter caseMultiplication(Multiplication object)
      {
        return createMultiplicationAdapter();
      }
      @Override
      public Adapter caseDivision(Division object)
      {
        return createDivisionAdapter();
      }
      @Override
      public Adapter caseModulo(Modulo object)
      {
        return createModuloAdapter();
      }
      @Override
      public Adapter caseHeapAccess(HeapAccess object)
      {
        return createHeapAccessAdapter();
      }
      @Override
      public Adapter caseStore(Store object)
      {
        return createStoreAdapter();
      }
      @Override
      public Adapter caseRetrieve(Retrieve object)
      {
        return createRetrieveAdapter();
      }
      @Override
      public Adapter caseFlowControl(FlowControl object)
      {
        return createFlowControlAdapter();
      }
      @Override
      public Adapter caseMarkLocation(MarkLocation object)
      {
        return createMarkLocationAdapter();
      }
      @Override
      public Adapter caseCallSubroutine(CallSubroutine object)
      {
        return createCallSubroutineAdapter();
      }
      @Override
      public Adapter caseUnconditionalJump(UnconditionalJump object)
      {
        return createUnconditionalJumpAdapter();
      }
      @Override
      public Adapter caseZeroJump(ZeroJump object)
      {
        return createZeroJumpAdapter();
      }
      @Override
      public Adapter caseNegativeJump(NegativeJump object)
      {
        return createNegativeJumpAdapter();
      }
      @Override
      public Adapter caseEndSubroutine(EndSubroutine object)
      {
        return createEndSubroutineAdapter();
      }
      @Override
      public Adapter caseEndProgram(EndProgram object)
      {
        return createEndProgramAdapter();
      }
      @Override
      public Adapter caseIO(IO object)
      {
        return createIOAdapter();
      }
      @Override
      public Adapter caseOutputCharacter(OutputCharacter object)
      {
        return createOutputCharacterAdapter();
      }
      @Override
      public Adapter caseOutputNumber(OutputNumber object)
      {
        return createOutputNumberAdapter();
      }
      @Override
      public Adapter caseReadCharacter(ReadCharacter object)
      {
        return createReadCharacterAdapter();
      }
      @Override
      public Adapter caseReadNumber(ReadNumber object)
      {
        return createReadNumberAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link ac.soton.java.whitespace.whiteSpace.WSProgram <em>WS Program</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ac.soton.java.whitespace.whiteSpace.WSProgram
   * @generated
   */
  public Adapter createWSProgramAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ac.soton.java.whitespace.whiteSpace.Statement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ac.soton.java.whitespace.whiteSpace.Statement
   * @generated
   */
  public Adapter createStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ac.soton.java.whitespace.whiteSpace.StackManipulation <em>Stack Manipulation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ac.soton.java.whitespace.whiteSpace.StackManipulation
   * @generated
   */
  public Adapter createStackManipulationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ac.soton.java.whitespace.whiteSpace.Push <em>Push</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ac.soton.java.whitespace.whiteSpace.Push
   * @generated
   */
  public Adapter createPushAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ac.soton.java.whitespace.whiteSpace.Duplicate <em>Duplicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ac.soton.java.whitespace.whiteSpace.Duplicate
   * @generated
   */
  public Adapter createDuplicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ac.soton.java.whitespace.whiteSpace.Copy <em>Copy</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ac.soton.java.whitespace.whiteSpace.Copy
   * @generated
   */
  public Adapter createCopyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ac.soton.java.whitespace.whiteSpace.Swap <em>Swap</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ac.soton.java.whitespace.whiteSpace.Swap
   * @generated
   */
  public Adapter createSwapAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ac.soton.java.whitespace.whiteSpace.Discard <em>Discard</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ac.soton.java.whitespace.whiteSpace.Discard
   * @generated
   */
  public Adapter createDiscardAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ac.soton.java.whitespace.whiteSpace.Slide <em>Slide</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ac.soton.java.whitespace.whiteSpace.Slide
   * @generated
   */
  public Adapter createSlideAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ac.soton.java.whitespace.whiteSpace.Arithmetic <em>Arithmetic</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ac.soton.java.whitespace.whiteSpace.Arithmetic
   * @generated
   */
  public Adapter createArithmeticAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ac.soton.java.whitespace.whiteSpace.Addition <em>Addition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ac.soton.java.whitespace.whiteSpace.Addition
   * @generated
   */
  public Adapter createAdditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ac.soton.java.whitespace.whiteSpace.Subtraction <em>Subtraction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ac.soton.java.whitespace.whiteSpace.Subtraction
   * @generated
   */
  public Adapter createSubtractionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ac.soton.java.whitespace.whiteSpace.Multiplication <em>Multiplication</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ac.soton.java.whitespace.whiteSpace.Multiplication
   * @generated
   */
  public Adapter createMultiplicationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ac.soton.java.whitespace.whiteSpace.Division <em>Division</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ac.soton.java.whitespace.whiteSpace.Division
   * @generated
   */
  public Adapter createDivisionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ac.soton.java.whitespace.whiteSpace.Modulo <em>Modulo</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ac.soton.java.whitespace.whiteSpace.Modulo
   * @generated
   */
  public Adapter createModuloAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ac.soton.java.whitespace.whiteSpace.HeapAccess <em>Heap Access</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ac.soton.java.whitespace.whiteSpace.HeapAccess
   * @generated
   */
  public Adapter createHeapAccessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ac.soton.java.whitespace.whiteSpace.Store <em>Store</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ac.soton.java.whitespace.whiteSpace.Store
   * @generated
   */
  public Adapter createStoreAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ac.soton.java.whitespace.whiteSpace.Retrieve <em>Retrieve</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ac.soton.java.whitespace.whiteSpace.Retrieve
   * @generated
   */
  public Adapter createRetrieveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ac.soton.java.whitespace.whiteSpace.FlowControl <em>Flow Control</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ac.soton.java.whitespace.whiteSpace.FlowControl
   * @generated
   */
  public Adapter createFlowControlAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ac.soton.java.whitespace.whiteSpace.MarkLocation <em>Mark Location</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ac.soton.java.whitespace.whiteSpace.MarkLocation
   * @generated
   */
  public Adapter createMarkLocationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ac.soton.java.whitespace.whiteSpace.CallSubroutine <em>Call Subroutine</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ac.soton.java.whitespace.whiteSpace.CallSubroutine
   * @generated
   */
  public Adapter createCallSubroutineAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ac.soton.java.whitespace.whiteSpace.UnconditionalJump <em>Unconditional Jump</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ac.soton.java.whitespace.whiteSpace.UnconditionalJump
   * @generated
   */
  public Adapter createUnconditionalJumpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ac.soton.java.whitespace.whiteSpace.ZeroJump <em>Zero Jump</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ac.soton.java.whitespace.whiteSpace.ZeroJump
   * @generated
   */
  public Adapter createZeroJumpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ac.soton.java.whitespace.whiteSpace.NegativeJump <em>Negative Jump</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ac.soton.java.whitespace.whiteSpace.NegativeJump
   * @generated
   */
  public Adapter createNegativeJumpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ac.soton.java.whitespace.whiteSpace.EndSubroutine <em>End Subroutine</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ac.soton.java.whitespace.whiteSpace.EndSubroutine
   * @generated
   */
  public Adapter createEndSubroutineAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ac.soton.java.whitespace.whiteSpace.EndProgram <em>End Program</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ac.soton.java.whitespace.whiteSpace.EndProgram
   * @generated
   */
  public Adapter createEndProgramAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ac.soton.java.whitespace.whiteSpace.IO <em>IO</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ac.soton.java.whitespace.whiteSpace.IO
   * @generated
   */
  public Adapter createIOAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ac.soton.java.whitespace.whiteSpace.OutputCharacter <em>Output Character</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ac.soton.java.whitespace.whiteSpace.OutputCharacter
   * @generated
   */
  public Adapter createOutputCharacterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ac.soton.java.whitespace.whiteSpace.OutputNumber <em>Output Number</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ac.soton.java.whitespace.whiteSpace.OutputNumber
   * @generated
   */
  public Adapter createOutputNumberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ac.soton.java.whitespace.whiteSpace.ReadCharacter <em>Read Character</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ac.soton.java.whitespace.whiteSpace.ReadCharacter
   * @generated
   */
  public Adapter createReadCharacterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ac.soton.java.whitespace.whiteSpace.ReadNumber <em>Read Number</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ac.soton.java.whitespace.whiteSpace.ReadNumber
   * @generated
   */
  public Adapter createReadNumberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //WhiteSpaceAdapterFactory
