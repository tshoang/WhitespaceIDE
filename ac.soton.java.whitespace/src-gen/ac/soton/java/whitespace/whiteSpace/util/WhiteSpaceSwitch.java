/**
 * generated by Xtext 2.27.0
 */
package ac.soton.java.whitespace.whiteSpace.util;

import ac.soton.java.whitespace.whiteSpace.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see ac.soton.java.whitespace.whiteSpace.WhiteSpacePackage
 * @generated
 */
public class WhiteSpaceSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static WhiteSpacePackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WhiteSpaceSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = WhiteSpacePackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case WhiteSpacePackage.WS_PROGRAM:
      {
        WSProgram wsProgram = (WSProgram)theEObject;
        T result = caseWSProgram(wsProgram);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WhiteSpacePackage.STATEMENT:
      {
        Statement statement = (Statement)theEObject;
        T result = caseStatement(statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WhiteSpacePackage.STACK_MANIPULATION:
      {
        StackManipulation stackManipulation = (StackManipulation)theEObject;
        T result = caseStackManipulation(stackManipulation);
        if (result == null) result = caseStatement(stackManipulation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WhiteSpacePackage.PUSH:
      {
        Push push = (Push)theEObject;
        T result = casePush(push);
        if (result == null) result = caseStackManipulation(push);
        if (result == null) result = caseStatement(push);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WhiteSpacePackage.DUPLICATE:
      {
        Duplicate duplicate = (Duplicate)theEObject;
        T result = caseDuplicate(duplicate);
        if (result == null) result = caseStackManipulation(duplicate);
        if (result == null) result = caseStatement(duplicate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WhiteSpacePackage.COPY:
      {
        Copy copy = (Copy)theEObject;
        T result = caseCopy(copy);
        if (result == null) result = caseStackManipulation(copy);
        if (result == null) result = caseStatement(copy);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WhiteSpacePackage.SWAP:
      {
        Swap swap = (Swap)theEObject;
        T result = caseSwap(swap);
        if (result == null) result = caseStackManipulation(swap);
        if (result == null) result = caseStatement(swap);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WhiteSpacePackage.DISCARD:
      {
        Discard discard = (Discard)theEObject;
        T result = caseDiscard(discard);
        if (result == null) result = caseStackManipulation(discard);
        if (result == null) result = caseStatement(discard);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WhiteSpacePackage.SLIDE:
      {
        Slide slide = (Slide)theEObject;
        T result = caseSlide(slide);
        if (result == null) result = caseStackManipulation(slide);
        if (result == null) result = caseStatement(slide);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WhiteSpacePackage.ARITHMETIC:
      {
        Arithmetic arithmetic = (Arithmetic)theEObject;
        T result = caseArithmetic(arithmetic);
        if (result == null) result = caseStatement(arithmetic);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WhiteSpacePackage.ADDITION:
      {
        Addition addition = (Addition)theEObject;
        T result = caseAddition(addition);
        if (result == null) result = caseArithmetic(addition);
        if (result == null) result = caseStatement(addition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WhiteSpacePackage.SUBTRACTION:
      {
        Subtraction subtraction = (Subtraction)theEObject;
        T result = caseSubtraction(subtraction);
        if (result == null) result = caseArithmetic(subtraction);
        if (result == null) result = caseStatement(subtraction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WhiteSpacePackage.MULTIPLICATION:
      {
        Multiplication multiplication = (Multiplication)theEObject;
        T result = caseMultiplication(multiplication);
        if (result == null) result = caseArithmetic(multiplication);
        if (result == null) result = caseStatement(multiplication);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WhiteSpacePackage.DIVISION:
      {
        Division division = (Division)theEObject;
        T result = caseDivision(division);
        if (result == null) result = caseArithmetic(division);
        if (result == null) result = caseStatement(division);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WhiteSpacePackage.MODULO:
      {
        Modulo modulo = (Modulo)theEObject;
        T result = caseModulo(modulo);
        if (result == null) result = caseArithmetic(modulo);
        if (result == null) result = caseStatement(modulo);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WhiteSpacePackage.HEAP_ACCESS:
      {
        HeapAccess heapAccess = (HeapAccess)theEObject;
        T result = caseHeapAccess(heapAccess);
        if (result == null) result = caseStatement(heapAccess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WhiteSpacePackage.STORE:
      {
        Store store = (Store)theEObject;
        T result = caseStore(store);
        if (result == null) result = caseHeapAccess(store);
        if (result == null) result = caseStatement(store);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WhiteSpacePackage.RETRIEVE:
      {
        Retrieve retrieve = (Retrieve)theEObject;
        T result = caseRetrieve(retrieve);
        if (result == null) result = caseHeapAccess(retrieve);
        if (result == null) result = caseStatement(retrieve);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WhiteSpacePackage.FLOW_CONTROL:
      {
        FlowControl flowControl = (FlowControl)theEObject;
        T result = caseFlowControl(flowControl);
        if (result == null) result = caseStatement(flowControl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WhiteSpacePackage.MARK_LOCATION:
      {
        MarkLocation markLocation = (MarkLocation)theEObject;
        T result = caseMarkLocation(markLocation);
        if (result == null) result = caseFlowControl(markLocation);
        if (result == null) result = caseStatement(markLocation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WhiteSpacePackage.CALL_SUBROUTINE:
      {
        CallSubroutine callSubroutine = (CallSubroutine)theEObject;
        T result = caseCallSubroutine(callSubroutine);
        if (result == null) result = caseFlowControl(callSubroutine);
        if (result == null) result = caseStatement(callSubroutine);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WhiteSpacePackage.UNCONDITIONAL_JUMP:
      {
        UnconditionalJump unconditionalJump = (UnconditionalJump)theEObject;
        T result = caseUnconditionalJump(unconditionalJump);
        if (result == null) result = caseFlowControl(unconditionalJump);
        if (result == null) result = caseStatement(unconditionalJump);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WhiteSpacePackage.ZERO_JUMP:
      {
        ZeroJump zeroJump = (ZeroJump)theEObject;
        T result = caseZeroJump(zeroJump);
        if (result == null) result = caseFlowControl(zeroJump);
        if (result == null) result = caseStatement(zeroJump);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WhiteSpacePackage.NEGATIVE_JUMP:
      {
        NegativeJump negativeJump = (NegativeJump)theEObject;
        T result = caseNegativeJump(negativeJump);
        if (result == null) result = caseFlowControl(negativeJump);
        if (result == null) result = caseStatement(negativeJump);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WhiteSpacePackage.END_SUBROUTINE:
      {
        EndSubroutine endSubroutine = (EndSubroutine)theEObject;
        T result = caseEndSubroutine(endSubroutine);
        if (result == null) result = caseFlowControl(endSubroutine);
        if (result == null) result = caseStatement(endSubroutine);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WhiteSpacePackage.END_PROGRAM:
      {
        EndProgram endProgram = (EndProgram)theEObject;
        T result = caseEndProgram(endProgram);
        if (result == null) result = caseFlowControl(endProgram);
        if (result == null) result = caseStatement(endProgram);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WhiteSpacePackage.IO:
      {
        IO io = (IO)theEObject;
        T result = caseIO(io);
        if (result == null) result = caseStatement(io);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WhiteSpacePackage.OUTPUT_CHARACTER:
      {
        OutputCharacter outputCharacter = (OutputCharacter)theEObject;
        T result = caseOutputCharacter(outputCharacter);
        if (result == null) result = caseIO(outputCharacter);
        if (result == null) result = caseStatement(outputCharacter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WhiteSpacePackage.OUTPUT_NUMBER:
      {
        OutputNumber outputNumber = (OutputNumber)theEObject;
        T result = caseOutputNumber(outputNumber);
        if (result == null) result = caseIO(outputNumber);
        if (result == null) result = caseStatement(outputNumber);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WhiteSpacePackage.READ_CHARACTER:
      {
        ReadCharacter readCharacter = (ReadCharacter)theEObject;
        T result = caseReadCharacter(readCharacter);
        if (result == null) result = caseIO(readCharacter);
        if (result == null) result = caseStatement(readCharacter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WhiteSpacePackage.READ_NUMBER:
      {
        ReadNumber readNumber = (ReadNumber)theEObject;
        T result = caseReadNumber(readNumber);
        if (result == null) result = caseIO(readNumber);
        if (result == null) result = caseStatement(readNumber);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>WS Program</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>WS Program</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWSProgram(WSProgram object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatement(Statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Stack Manipulation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Stack Manipulation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStackManipulation(StackManipulation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Push</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Push</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePush(Push object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Duplicate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Duplicate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDuplicate(Duplicate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Copy</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Copy</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCopy(Copy object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Swap</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Swap</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSwap(Swap object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Discard</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Discard</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDiscard(Discard object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Slide</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Slide</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSlide(Slide object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Arithmetic</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Arithmetic</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArithmetic(Arithmetic object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Addition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Addition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAddition(Addition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Subtraction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Subtraction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubtraction(Subtraction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multiplication</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multiplication</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultiplication(Multiplication object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Division</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Division</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDivision(Division object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Modulo</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Modulo</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModulo(Modulo object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Heap Access</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Heap Access</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHeapAccess(HeapAccess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Store</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Store</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStore(Store object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Retrieve</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Retrieve</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRetrieve(Retrieve object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Flow Control</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Flow Control</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFlowControl(FlowControl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mark Location</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mark Location</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMarkLocation(MarkLocation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Call Subroutine</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Call Subroutine</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCallSubroutine(CallSubroutine object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unconditional Jump</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unconditional Jump</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnconditionalJump(UnconditionalJump object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Zero Jump</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Zero Jump</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseZeroJump(ZeroJump object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Negative Jump</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Negative Jump</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNegativeJump(NegativeJump object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>End Subroutine</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>End Subroutine</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEndSubroutine(EndSubroutine object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>End Program</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>End Program</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEndProgram(EndProgram object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>IO</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>IO</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIO(IO object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Output Character</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Output Character</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutputCharacter(OutputCharacter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Output Number</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Output Number</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutputNumber(OutputNumber object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Read Character</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Read Character</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReadCharacter(ReadCharacter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Read Number</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Read Number</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReadNumber(ReadNumber object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //WhiteSpaceSwitch
